const fs = require('fs');
const path = require('path');

module.exports = {
  /**
   * Find default components by directory. Components must have status ready, not be hidden and have variants.
   * Must be run in a Node environment for filesystem access.
   * @param {string} pathSegment the relative directory path.
   * @returns {string[]} an array of component names.
   */
  getDefaultComponents: pathSegment => {
    const components = [];

    function searchDirectory(startPath, filter) {
      if (!fs.existsSync(startPath)) {
        return;
      }

      const files = fs.readdirSync(startPath);

      files.forEach(file => {
        const filePath = path.join(startPath, file);
        const stat = fs.lstatSync(filePath);

        if (stat.isDirectory()) {
          searchDirectory(filePath, filter);
        } else if (filePath.indexOf(filter) >= 0) {
          const configData = fs.readFileSync(filePath);
          const config = JSON.parse(configData);
          const hasVariants = config.context || (config.variants && config.variants.length);

          if (!config.hidden && hasVariants && config.status === 'ready') {
            const variant = config.default && config.variants?.length > 1 ? `--${config.default}` : '';
            const name = config.handle || config.name || file.replace('.config.json', '');
            const component = `${name}${variant}`;

            components.push(component);
          }
        }
      });
    }

    const startPath = path.join(__dirname, pathSegment);
    searchDirectory(startPath, '.config.json');

    return components;
  }
};
