module.exports = {
  /**
   * Configure a Fractal instance
   * @returns {Object} Fractal instance
   */
  configure() {
    const fractal = require('@frctl/fractal').create();
    const mandelbrot = require('@frctl/mandelbrot');
    const path = require('path');
    const p = require('./package.json');
    const partials = require('./fractal/handlebars/partials');
    const helpers = require('./fractal/handlebars/helpers')(fractal, p.version);
    const hbs = require('@frctl/handlebars')({
      helpers,
      partials
    });

    fractal.components.engine(hbs); /* set as the default template engine for components */
    fractal.docs.engine(hbs); /* you can also use the same instance for documentation, if you like! */

    // Project settings
    fractal.set('project.title', `${p.name} (v${p.version})`);
    fractal.set('project.version', p.version);

    // Theme settings
    const theme = mandelbrot({
      favicon: '/favicon.ico',
      skin: 'white',
      styles: ['default', '/assets/tweaks.css'],
      nav: ['search', 'components', 'docs'],
      panels: ['notes', 'html', 'view', 'context', 'resources', 'info'],
      labels: {
        components: {
          preview: {
            labelRtl: 'Preview in RTL',
            labelDark: 'Preview with dark theme',
            labelInverse: 'Preview with inverse theme',
            labelPlaceholder: 'Preview with placeholder content',
            withLayoutRtl: 'With layout (in RTL)',
            withLayoutDark: 'With layout (in dark theme)',
            withLayoutInverse: 'With layout (in inverse theme)',
            withLayoutContent: 'With layout and placeholder content'
          }
        },
        panels: {
          notes: 'Usage'
        }
      }
    });

    // Add custom theme tweaks
    theme.addStatic(path.join(__dirname, '/fractal/theme-overrides'), '/');

    // specify a directory to hold the theme override templates
    theme.addLoadPath(path.join(__dirname, '/fractal/theme-overrides'));

    theme.addRoute('/components/preview-rtl/:handle', {
      handle: 'preview-rtl',
      view: 'pages/components/preview-rtl.nunj'
    }, this.getHandles);

    theme.addRoute('/components/preview-content/:handle', {
      handle: 'preview-content',
      view: 'pages/components/preview-content.nunj'
    }, this.getHandles);

    theme.addRoute('/components/preview-dark/:handle', {
      handle: 'preview-dark',
      view: 'pages/components/preview-dark.nunj'
    }, this.getHandles);

    theme.addRoute('/components/preview-inverse/:handle', {
      handle: 'preview-inverse',
      view: 'pages/components/preview-inverse.nunj'
    }, this.getHandles);

    theme.addRoute('/components/detail/:handle', {
      handle: 'component',
      view: 'pages/components/detail-rtl.nunj'
    }, this.getHandles);

    fractal.web.theme(theme);

    // Components settings
    fractal.components.set('statuses', {
      bootstrap: {
        label: 'Bootstrap',
        description: 'Bootstrap only. Do not implement.',
        color: '#563d7c'
      },
      deprecated: {
        label: 'Deprecated',
        description: 'No longer supported. Do not implement.',
        color: '#000000'
      },
      prototype: {
        label: 'Prototype',
        description: 'Prototype or testing. Do not implement.',
        color: '#AE1313'
      },
      caution: {
        label: 'Caution',
        description: 'Use caution. May cause accessibility issues.',
        color: '#AE1313'
      },
      wip: {
        label: 'WIP',
        description: 'Work in progress. Wait to implement in production.',
        color: '#BD5800'
      },
      ready: {
        label: 'Stable',
        description: 'Stable. Implement with best practices in mind.',
        color: '#168816'
      }
    });
    fractal.components.set('path', path.join(__dirname, '/src'));
    fractal.components.set('default.status', 'wip');
    fractal.components.set('label', 'Library');
    fractal.components.set('default.preview', '@preview-grid');

    // Docs settings
    fractal.docs.set('path', path.join(__dirname, '/fractal/docs'));

    // Browsersync settings
    fractal.web.set('server.syncOptions', {
      open: true,
      browser: 'default',
      notify: true
    });

    // Build settings
    fractal.web.set('static.path', path.join(__dirname, '/dist'));
    fractal.web.set('builder.dest', path.join(__dirname, '/fractal/build'));

    return fractal;
  },
  /**
   * Start Fractal for local development
   * @param {Object} fractal Fractal instance
   * @param {number} [port] Port for Fractal site
   * @param {Function} [callback] Callback function that is passed the Fractal instance after startup
   */
  start(fractal, port = 9001, callback = null) {
    const logger = fractal.cli.console;

    fractal.set('project.environment.local', 'true');
    const fractalServer = fractal.web.server({
      sync: true,
      port
    });
    fractalServer.on('error', err => logger.error(err.message));
    fractalServer.start().then(() => {
      logger.success(`Fractal server is now running at ${fractalServer.url}`);
      logger.success(`Network URL: ${fractalServer.urls.sync.external}`);
      fractal.watch();
      if (callback) {
        callback(fractal);
      }
    });
  },
  /**
   * Build Fractal static HTML site
   * @param {Object} fractal Fractal instance
   * @param {Function} [callback] Callback function that is passed the Fractal instance after building
   */
  buildHtml(fractal, callback = null) {
    const logger = fractal.cli.console;

    fractal.set('project.environment.production', 'true');
    const builder = fractal.web.builder();
    builder.on('progress', (completed, total) =>
      logger.update(`Exported ${completed} of ${total} items`, 'info')
    );
    builder.on('error', err => logger.error(err.message));
    return builder.build().then(() => {
      logger.success('Fractal build completed!');
      if (callback) {
        callback(fractal);
      }
    });
  },
  /**
   * Build Fractal data object
   * @param {Object} fractal Fractal instance
   * @param {Function} [callback] Callback function that is passed the Fractal instance after building
   */
  buildJson(fractal, callback = null) {
    const logger = fractal.cli.console;

    // Prevent Fractal's Handlebars instance from conflicting with other instances in use downstream
    // https://handlebarsjs.com/api-reference/runtime.html#handlebars-noconflict
    fractal.components._engine._engine.Promise.noConflict();

    fractal.set('project.environment.production', 'true');
    const server = fractal.web.server();
    server.start().then(() => {
      logger.success('The Fractal component data has been generated.');
      if (callback) {
        callback(fractal);
      }

      server.stop();
      fractal.unwatch(); // exit fractal
    });
  },
  /**
   * Utility required to add a new route to our Fractal theme
   * Logic copied from node_modules/@frctl/mandelbrot/src/theme.js
   * @param {*} fractal the Fractal instance
   * @returns {Array} array of Fractal component handles
   */
  getHandles(fractal) {
    let handles = null;

    // eslint-disable-next-line no-return-assign
    fractal.components.on('updated', () => (handles = null));

    if (handles) {
      return handles;
    }

    handles = [];
    fractal.components.flatten().each(comp => {
      handles.push(comp.handle);
      if (comp.variants().size > 1) {
        comp.variants().each(variant => handles.push(variant.handle));
      }
    });
    handles = handles.map(h => ({ handle: h }));
    return handles;
  }
};
