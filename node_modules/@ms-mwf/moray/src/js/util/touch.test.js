import TouchUtil, { EventName, ClassName } from './touch';

const { POINTER_DOWN, POINTER_UP, TOUCH_START, TOUCH_MOVE, TOUCH_END } = EventName;

describe(TouchUtil.name, () => {
  afterEach(() => {
    // reset to Jest initial states
    delete document.documentElement.ontouchstart;
    delete navigator.maxTouchPoints;
    delete window.PointerEvent;
    delete window.MSPointerEvent;

    jest.restoreAllMocks();
  });

  describe('addEventListeners()', () => {
    it('does nothing if touch is not supported', () => {
      const instance = new TouchUtil({ el: document.createElement('div') });
      const addEventListener = jest.spyOn(instance.el, 'addEventListener');

      instance.addEventListeners();

      expect(addEventListener).not.toBeCalled();
    });

    it('adds two pointer event listeners and class if browser has pointer events', () => {
      document.documentElement.ontouchstart = jest.fn();
      window.PointerEvent = jest.fn();

      const instance = new TouchUtil({ el: document.createElement('div') });
      const addEventListener = jest.spyOn(instance.el, 'addEventListener');

      instance.addEventListeners();

      expect(addEventListener).toBeCalledTimes(2);
      expect(addEventListener).toBeCalledWith(POINTER_DOWN, expect.any(Function));
      expect(addEventListener).toBeCalledWith(POINTER_UP, expect.any(Function));

      expect(instance.el.classList.contains(ClassName.POINTER_EVENT)).toBe(true);
    });

    it('adds provided element class if browser has pointer events', () => {
      document.documentElement.ontouchstart = jest.fn();
      window.PointerEvent = jest.fn();

      const customCssClass = 'custom-pointer-event-css';
      const instance = new TouchUtil({
        el: document.createElement('div'),
        pointerEventClassName: customCssClass
      });

      instance.addEventListeners();

      expect(instance.el.classList.contains(customCssClass)).toBe(true);
    });

    it('adds three touch event listeners if browser has touch (no pointer) events', () => {
      document.documentElement.ontouchstart = jest.fn();

      const instance = new TouchUtil({ el: document.createElement('div') });
      const addEventListener = jest.spyOn(instance.el, 'addEventListener');

      instance.addEventListeners();

      expect(addEventListener).toBeCalledTimes(3);
      expect(addEventListener).toBeCalledWith(TOUCH_START, expect.any(Function));
      expect(addEventListener).toBeCalledWith(TOUCH_MOVE, expect.any(Function));
      expect(addEventListener).toBeCalledWith(TOUCH_END, expect.any(Function));
    });
  });

  describe('removeEventListeners()', () => {
    it('does nothing if touch is not supported', () => {
      const instance = new TouchUtil({ el: document.createElement('div') });
      const removeEventListener = jest.spyOn(instance.el, 'removeEventListener');

      instance.removeEventListeners();

      expect(removeEventListener).not.toBeCalled();
    });

    it('removes two pointer event listeners and class if browser has pointer events', () => {
      document.documentElement.ontouchstart = jest.fn();
      window.PointerEvent = jest.fn();

      const instance = new TouchUtil({ el: document.createElement('div') });
      const removeEventListener = jest.spyOn(instance.el, 'removeEventListener');

      instance.removeEventListeners();

      expect(removeEventListener).toBeCalledTimes(2);
      expect(removeEventListener).toBeCalledWith(POINTER_DOWN, expect.any(Function));
      expect(removeEventListener).toBeCalledWith(POINTER_UP, expect.any(Function));

      expect(instance.el.classList.contains(ClassName.POINTER_EVENT)).toBe(false);
    });

    it('removes provided element class if browser has pointer events', () => {
      document.documentElement.ontouchstart = jest.fn();
      window.PointerEvent = jest.fn();

      const customCssClass = 'custom-pointer-event-css';
      const instance = new TouchUtil({
        el: document.createElement('div'),
        pointerEventClassName: customCssClass
      });

      instance.removeEventListeners();

      expect(instance.el.classList.contains(customCssClass)).toBe(false);
    });

    it('removes three touch event listeners if browser has touch (no pointer) events', () => {
      document.documentElement.ontouchstart = jest.fn();

      const el = document.createElement('div');
      el.classList.add(ClassName.POINTER_EVENT);
      const instance = new TouchUtil({ el });
      const addEventListener = jest.spyOn(instance.el, 'removeEventListener');

      instance.removeEventListeners();

      expect(addEventListener).toBeCalledTimes(3);
      expect(addEventListener).toBeCalledWith(TOUCH_START, expect.any(Function));
      expect(addEventListener).toBeCalledWith(TOUCH_MOVE, expect.any(Function));
      expect(addEventListener).toBeCalledWith(TOUCH_END, expect.any(Function));
    });
  });
});
