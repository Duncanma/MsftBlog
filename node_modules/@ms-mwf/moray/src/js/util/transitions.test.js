import TransitionFunctions from './transitions';
const { TRANSITION_END, getTransitionDurationFromElement, triggerTransitionEnd, emulateTransitionEnd } = TransitionFunctions;

describe('Transitions', () => {
  beforeEach(() => {
    const style = document.createElement('style');
    style.innerHTML = `
        .testingValues {
            transition-duration: 1s;
            transition-delay: 1s;
        }
        .testingEmptyValues {
          transition-duration: 0;
          transition-delay: 0;
        }
    `;
    document.head.append(style);

    document.body.innerHTML = `
      <div class="testingValues" />
        <p>HTML element with CSS transition-duration and transition-delay for testing</p>
      </div>
      <div class="testingEmptyValues" />
        <p>HTML element with CSS transition-duration and transition-delay for testing</p>
      </div>
    `;
  });

  describe('getTransitionDurationFromElement', () => {
    it('should successfully calculate transition duration plus transition delay multiplied by 1000', () => {
      const el = document.querySelector('.testingValues');
      expect(getTransitionDurationFromElement(el)).toEqual(2000);
    });

    it('should return 0 when no element is provided', () => {
      const el = document.querySelector('.noElement');
      expect(getTransitionDurationFromElement(el)).toEqual(0);
    });

    it('should return 0 when element does not have a transition delay or duration value', () => {
      const el = document.querySelector('.testingEmptyValues');
      expect(getTransitionDurationFromElement(el)).toEqual(0);
    });
  });

  describe('triggerTransitionEnd', () => {
    it('should dispatch a transition-end event', () => {
      const el = document.querySelector('.testingEmptyValues');
      el.dispatchEvent = jest.fn();
      triggerTransitionEnd(el);

      const dispatchedEvent = el.dispatchEvent.mock.calls[0][0];
      expect(dispatchedEvent.type).toBe(TRANSITION_END);
    });
  });

  describe('emulateTransitionEnd', () => {
    it('should dispatch transition-end event after specified duration', () => {
      jest.useFakeTimers();
      const el = document.querySelector('.testingEmptyValues');
      el.dispatchEvent = jest.fn();
      emulateTransitionEnd(el, 4);
      expect(el.dispatchEvent).not.toBeCalled();
      jest.advanceTimersByTime(9);
      expect(el.dispatchEvent).toBeCalled();
      expect(el.dispatchEvent).toHaveBeenCalledTimes(1);
    });

    it('should dispatch transition-end event after 5ms if no duration provided', () => {
      jest.useFakeTimers();
      const el = document.querySelector('.testingEmptyValues');
      el.dispatchEvent = jest.fn();
      emulateTransitionEnd(el);
      expect(el.dispatchEvent).not.toBeCalled();
      jest.advanceTimersByTime(5);
      expect(el.dispatchEvent).toBeCalled();
      expect(el.dispatchEvent).toHaveBeenCalledTimes(1);
    });
  });
});

