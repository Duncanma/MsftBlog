const InitializationUtil = {
  /**
   * Initialize a component after DOM is loaded
   * @param {string} selector - DOM selector for component
   * @param {Function} init - Callback function to initialize the component
   */
  initializeComponent(selector, init) {
    document.querySelectorAll(selector).forEach(node => init(node));
  },

  /**
   * Iterate over list to add event listeners
   * @param {array} eventList - List of event maps
   */
  addEvents(eventList) {
    for (const obj of eventList) {
      if (typeof obj.options === 'undefined') {
        obj.options = {};
      }

      if (typeof obj.el.addEventListener === 'function') {
        obj.el.addEventListener(obj.type, obj.handler, obj.options);
      } else if (obj.el.toString() === '[object MediaQueryList]' && typeof obj.el.addListener === 'function') {
        obj.el.addListener(obj.handler); // for Safari <14
      }
    }
  },

  /**
   * Iterate over list to remove event listeners
   * @param {array} eventList - List of event maps
   */
  removeEvents(eventList) {
    for (const obj of eventList) {
      if (typeof obj.el.removeEventListener === 'function') {
        obj.el.removeEventListener(obj.type, obj.handler);
      } else if (obj.el.toString() === '[object MediaQueryList]' && typeof obj.el.removeListener === 'function') {
        obj.el.removeListener(obj.handler); // for Safari <14
      }
    }
  },

  /**
   * Tears down each in a list of mwf component instances
   * @param {Array} componentList an array of mwf component instance
   */
  tearDownComponentList(componentList) {
    if (Array.isArray(componentList)) {
      let component;
      while (componentList.length > 0) {
        component = componentList.pop();
        if (typeof component.remove === 'function') {
          component.remove();
        }
      }
    }
  }
};

export default InitializationUtil;
