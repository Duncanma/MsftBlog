import FocusControls from './focus-controls';

const FocusControlsTestHtml = `
  <a id="link1" href="#link2">Go to link 2</a>
  <a id="link2" href="#link1">Go to link 1</a>
`;

const clickEvent = new MouseEvent('click', { bubbles: true, cancelable: true });

// Set up our document body
document.body.innerHTML = FocusControlsTestHtml;

describe('Focus controls', () => {
  const links = document.querySelectorAll('a');
  let eventValue = '';
  let instances;

  beforeAll(() => {
    links.forEach(node => {
      new FocusControls({ el: node });
    });

    instances = FocusControls.getInstances();

    // Setup event listeners for custom events
    instances[0].el.addEventListener('onRemove', () => {
      eventValue = 'removed';
    });
  });

  it('should focus on the element linked to in the href on click', () => {
    const targetEl = document.querySelector(links[0].getAttribute('href'));
    links[0].dispatchEvent(clickEvent);
    expect(document.activeElement).toEqual(targetEl);
  });

  it('should be able to be removed', () => {
    instances[0].remove();
    expect(FocusControls.getInstances().length).toEqual(1);
    expect(eventValue).toEqual('removed');
  });
});
