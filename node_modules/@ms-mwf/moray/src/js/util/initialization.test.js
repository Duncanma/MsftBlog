import InitializationUtil from './initialization';

const testDom =
  '<div><button id="button1">Button 1</button><button id="button2">Button 2</button><button id="button3">Button 3</button></div>';

document.body.innerHTML = testDom;

describe('InitializationUtil', () => {
  describe('initializeComponent()', () => {
    const testCallback = jest.fn();
    const button1 = document.getElementById('button1');
    const button2 = document.getElementById('button2');
    const button3 = document.getElementById('button3');

    it('calls the initialization callback with generic selector', () => {
      InitializationUtil.initializeComponent('button', testCallback);

      expect(testCallback).toHaveBeenCalledTimes(3);
      expect(testCallback).toHaveBeenCalledWith(button1);
      expect(testCallback).toHaveBeenCalledWith(button2);
      expect(testCallback).toHaveBeenCalledWith(button3);
    });
  });

  describe('addEvents()', () => {
    const testCallback = jest.fn();
    const eventMaps = [{ type: 'click', el: document.getElementById('button1'), handler: testCallback }];
    beforeEach(() => {
      InitializationUtil.addEvents(eventMaps);
      document.getElementById('button1').click();
    });
    it('adds the event listeners', () => {
      expect(testCallback).toHaveBeenCalledTimes(1);
    });
  });

  describe('removeEvents()', () => {
    const testCallback = jest.fn();
    const testEl = document.getElementById('button1');
    beforeEach(() => {
      const eventMaps = [{ type: 'click', el: testEl, handler: testCallback }];
      testEl.addEventListener('click', testCallback);

      InitializationUtil.removeEvents(eventMaps);
    });
    it('removes the event listeners', () => {
      testEl.click();
      expect(testCallback).not.toHaveBeenCalled();
    });
  });

  describe('tearDownComponentList()', () => {
    const mockRemove1 = jest.fn();
    const mockRemove2 = jest.fn();
    const mockComponentList = [
      { update: () => {}, remove: mockRemove1 },
      { update: () => {} },
      { update: () => {}, remove: mockRemove2 }
    ];
    InitializationUtil.tearDownComponentList(mockComponentList);
    it('removes components and calls the remove methods', () => {
      expect(mockComponentList.length).toEqual(0);
      expect(mockRemove1).toHaveBeenCalled();
      expect(mockRemove2).toHaveBeenCalled();
    });
  });
});
