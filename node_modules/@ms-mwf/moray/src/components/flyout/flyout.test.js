import Flyout from './flyout';

// Mock the document.body.clientWidth property for JSDOM
Object.defineProperty(window.HTMLElement.prototype, 'clientWidth', {
  value: window.innerWidth // 1024
});

const flyoutDefaultHtml =
  '<button id="controlDefault" aria-controls="menuDefault">Trigger</button>' +
  '<div id="menuDefault"></div>';

const flyoutAltHtml =
  '<button id="controlAlt" aria-controls="menuAlt" data-placement="left" data-alignment="center" data-offset="2px" data-disable-reflow>Trigger</button>' +
  '<div class="fade" id="menuAlt"></div>';

const boundingRectCenter = {
  el: { bottom: 404, height: 40, left: 441, right: 583, top: 364, width: 143, x: 441, y: 364 },
  menu: { bottom: 510, height: 146, left: 0, right: 336, top: 364, width: 336, x: 0, y: 364 },
  parent: { bottom: 404, height: 40, left: 0, right: 1024, top: 364, width: 1024, x: 0, y: 364 },
  window: { width: 1024 }
};
const boundingRectCenterLeft = {
  el: { bottom: 404, height: 40, left: 0, right: 142.625, top: 364, width: 142.625, x: 0, y: 364 },
  menu: { bottom: 510, height: 146, left: 0, right: 336, top: 364, width: 336, x: 0, y: 364 },
  parent: { bottom: 404, height: 40, left: 0, right: 1024, top: 364, width: 1024, x: 0, y: 364 },
  window: { width: 1024 }
};
const boundingRectCenterRight = {
  el: { bottom: 404, height: 40, left: 881.375, right: 1024, top: 364, width: 142.625, x: 881.375, y: 364 },
  menu: { bottom: 510, height: 146, left: 0, right: 336, top: 364, width: 336, x: 0, y: 364 },
  parent: { bottom: 404, height: 40, left: 0, right: 1024, top: 364, width: 1024, x: 0, y: 364 },
  window: { width: 1024 }
};
const boundingRectTopCenter = {
  el: { bottom: 40, height: 40, left: 440.6875, right: 583.3125, top: 0, width: 142.625, x: 440.6875, y: 0 },
  menu: { bottom: 146, height: 146, left: 0, right: 336, top: 0, width: 336, x: 0, y: 0 },
  parent: { bottom: 40, height: 40, left: 0, right: 1024, top: 0, width: 1024, x: 0, y: 0 },
  window: { width: 1024 }
};
const boundingRectTopLeft = {
  el: { bottom: 40, height: 40, left: 0, right: 142.625, top: 0, width: 142.625, x: 0, y: 0 },
  menu: { bottom: 146, height: 146, left: 0, right: 336, top: 0, width: 336, x: 0, y: 0 },
  parent: { bottom: 40, height: 40, left: 0, right: 1024, top: 0, width: 1024, x: 0, y: 0 },
  window: { width: 1024 }
};
const boundingRectTopRight = {
  el: { bottom: 40, height: 40, left: 881.375, right: 1024, top: 0, width: 142.625, x: 881.375, y: 0 },
  menu: { bottom: 146, height: 146, left: 0, right: 336, top: 0, width: 336, x: 0, y: 0 },
  parent: { bottom: 40, height: 40, left: 0, right: 1024, top: 0, width: 1024, x: 0, y: 0 },
  window: { width: 1024 }
};
const boundingRectBottomCenter = {
  el: { bottom: 768, height: 40, left: 440.6875, right: 583.3125, top: 728, width: 142.625, x: 440.6875, y: 728 },
  menu: { bottom: 874, height: 146, left: 0, right: 336, top: 728, width: 336, x: 0, y: 728 },
  parent: { bottom: 768, height: 40, left: 0, right: 1024, top: 728, width: 1024, x: 0, y: 728 },
  window: { width: 1024 }
};
const boundingRectBottomLeft = {
  el: { bottom: 768, height: 40, left: 0, right: 142.625, top: 728, width: 142.625, x: 0, y: 728 },
  menu: { bottom: 874, height: 146, left: 0, right: 336, top: 728, width: 336, x: 0, y: 728 },
  parent: { bottom: 768, height: 40, left: 0, right: 1024, top: 728, width: 1024, x: 0, y: 728 },
  window: { width: 1024 }
};
const boundingRectBottomRight = {
  el: { bottom: 768, height: 40, left: 881, right: 1023.625, top: 728, width: 142.625, x: 881, y: 728 },
  menu: { bottom: 914, height: 146, left: 688, right: 1024, top: 768, width: 336, x: 688, y: 768 },
  parent: { bottom: 768, height: 40, left: 0, right: 1024, top: 728, width: 1024, x: 0, y: 728 },
  window: { width: 1024 }
};

// Set up our document body
document.body.innerHTML = flyoutDefaultHtml + flyoutAltHtml;

// Default
describe('Flyout', () => {
  let flyoutDefault;

  beforeEach(() => {
    // Initialize flyouts
    flyoutDefault = new Flyout({
      el: document.querySelector('#controlDefault')
    });
  });

  it('should be initialized', () => {
    expect(flyoutDefault.el.id).toEqual('controlDefault');
    expect(flyoutDefault.menu.id).toEqual('menuDefault');
    expect(flyoutDefault.placement).toEqual('right');
    expect(flyoutDefault.alignment).toEqual('start');
    expect(flyoutDefault.offset).toEqual(0);
    expect(flyoutDefault.enableReflow).toEqual(true);
    expect(flyoutDefault.enableFade).toEqual(false);
    expect(flyoutDefault.shown).toEqual(false);
  });

  describe('with options set using HTML attributes', () => {
    let flyoutAlt;

    beforeEach(() => {
      flyoutAlt = new Flyout({
        el: document.querySelector('#controlAlt')
      });
    });

    it('should be initialized', () => {
      expect(flyoutAlt.el.id).toEqual('controlAlt');
      expect(flyoutAlt.menu.id).toEqual('menuAlt');
      expect(flyoutAlt.placement).toEqual('left');
      expect(flyoutAlt.alignment).toEqual('center');
      expect(flyoutAlt.offset).toEqual(0);
      expect(flyoutAlt.enableReflow).toEqual(false);
      expect(flyoutAlt.enableFade).toEqual(true);
      expect(flyoutAlt.shown).toEqual(false);
    });
  });

  it('can update the placement option', () => {
    flyoutDefault.update({ placement: 'top' });
    expect(flyoutDefault.placement).toEqual('top');

    flyoutDefault.update({ placement: 'bottom' });
    expect(flyoutDefault.placement).toEqual('bottom');

    flyoutDefault.update({ placement: 'left' });
    expect(flyoutDefault.placement).toEqual('left');

    flyoutDefault.update({ placement: 'right' });
    expect(flyoutDefault.placement).toEqual('right');
  });

  it('can update the alignment option', () => {
    flyoutDefault.update({ alignment: 'center' });
    expect(flyoutDefault.alignment).toEqual('center');

    flyoutDefault.update({ alignment: 'start' });
    expect(flyoutDefault.alignment).toEqual('start');

    flyoutDefault.update({ alignment: 'end' });
    expect(flyoutDefault.alignment).toEqual('end');
  });

  it('can update the offset option', () => {
    flyoutDefault.update({ offset: '2px' });
    expect(flyoutDefault.offset).toEqual(2);
  });

  it('can update the reflow option', () => {
    flyoutDefault.update({ enableReflow: false });
    expect(flyoutDefault.enableReflow).toEqual(false);

    flyoutDefault.update({ enableReflow: true });
    expect(flyoutDefault.enableReflow).toEqual(true);
  });

  it('can update the fade effect option', () => {
    flyoutDefault.update({ enableFade: true });
    expect(flyoutDefault.enableFade).toEqual(true);
    expect(flyoutDefault.menu.classList.contains('fade')).toEqual(true);

    flyoutDefault.update({ enableFade: false });
    expect(flyoutDefault.enableFade).toEqual(false);
    expect(flyoutDefault.menu.classList.contains('fade')).toEqual(false);
  });

  describe('when the menu is positioned', () => {
    beforeEach(() => {
      // Setup/mock layout for JSDOM
      flyoutDefault.boundingRect = boundingRectCenter;
      flyoutDefault.positionMenu();
    });

    it('should position the menu', () => {
      expect(flyoutDefault.placement).toEqual('right');
      expect(flyoutDefault.currentPosition.placement).toEqual('right');
      expect(flyoutDefault.alignment).toEqual('start');
      expect(flyoutDefault.currentPosition.alignment).toEqual('start');
      expect(flyoutDefault.menu.classList.contains('flyout-right')).toEqual(true);
      expect(flyoutDefault.menu.classList.contains('flyout-align-start')).toEqual(true);

      expect(flyoutDefault.menu.style.top).toEqual('0px');
      expect(flyoutDefault.menu.style.right).toEqual('');
      expect(flyoutDefault.menu.style.bottom).toEqual('');
      expect(flyoutDefault.menu.style.left).toEqual('441px');
      expect(flyoutDefault.menu.style.transform).toEqual('translate(143px, 0px)');
    });
  });

  describe('when the menu is shown', () => {
    beforeEach(() => {
      flyoutDefault.show();
    });

    it('should show the menu', () => {
      expect(flyoutDefault.shown).toEqual(true);
      expect(flyoutDefault.el.classList.contains('active')).toEqual(true);
      expect(flyoutDefault.menu.classList.contains('show')).toEqual(true);
      expect(flyoutDefault.menu.classList.contains('flyout-right')).toEqual(true);
      expect(flyoutDefault.menu.classList.contains('flyout-align-start')).toEqual(true);
    });
  });

  describe('when the menu is hidden', () => {
    beforeEach(() => {
      flyoutDefault.hide();
    });

    it('should hide the menu', () => {
      expect(flyoutDefault.shown).toEqual(false);
      expect(flyoutDefault.el.classList.contains('active')).toEqual(false);
      expect(flyoutDefault.menu.classList.contains('show')).toEqual(false);
    });
  });
});

// Top
describe('Flyout top', () => {
  let flyoutTop;

  describe('with reflow enabled', () => {
    beforeAll(() => {
      flyoutTop = new Flyout({
        el: document.querySelector('#controlDefault'),
        enableReflow: true,
        placement: 'top',
        alignment: 'start'
      });
    });

    afterAll(() => {
      // Reset the window to default size
      window.innerWidth = 1024;
      window.innerHeight = 768;
    });

    it('should position the menu above the trigger', () => {
      flyoutTop.boundingRect = boundingRectCenter;
      flyoutTop.positionMenu();

      expect(flyoutTop.placement).toEqual('top');
      expect(flyoutTop.alignment).toEqual('start');
      expect(flyoutTop.currentPosition.placement).toEqual('top');
      expect(flyoutTop.currentPosition.alignment).toEqual('start');
      expect(flyoutTop.menu.classList.contains('flyout-top')).toEqual(true);
      expect(flyoutTop.menu.classList.contains('flyout-align-start')).toEqual(true);

      expect(flyoutTop.menu.style.top).toEqual('0px');
      expect(flyoutTop.menu.style.right).toEqual('');
      expect(flyoutTop.menu.style.bottom).toEqual('');
      expect(flyoutTop.menu.style.left).toEqual('441px');
      expect(flyoutTop.menu.style.transform).toEqual('translate(0px, -146px)');
    });

    it('should position the menu right when there is no space above the trigger', () => {
      flyoutTop.boundingRect = boundingRectTopCenter;
      flyoutTop.positionMenu();

      expect(flyoutTop.placement).toEqual('top');
      expect(flyoutTop.currentPosition.placement).toEqual('right');
      expect(flyoutTop.alignment).toEqual('start');
      expect(flyoutTop.currentPosition.alignment).toEqual('start');
      expect(flyoutTop.menu.classList.contains('flyout-right')).toEqual(true);
      expect(flyoutTop.menu.classList.contains('flyout-align-start')).toEqual(true);

      expect(flyoutTop.menu.classList.contains('flyout-top')).toEqual(false);

      expect(flyoutTop.menu.style.top).toEqual('0px');
      expect(flyoutTop.menu.style.right).toEqual('');
      expect(flyoutTop.menu.style.bottom).toEqual('');
      expect(flyoutTop.menu.style.left).toEqual('441px');
      expect(flyoutTop.menu.style.transform).toEqual('translate(143px, 0px)');
    });

    it('should position the menu below when there is no space above or right of the trigger', () => {
      flyoutTop.boundingRect = boundingRectTopRight;
      flyoutTop.positionMenu();

      expect(flyoutTop.placement).toEqual('top');
      expect(flyoutTop.alignment).toEqual('start');
      expect(flyoutTop.currentPosition.placement).toEqual('bottom');
      expect(flyoutTop.currentPosition.alignment).toEqual('end');
      expect(flyoutTop.menu.classList.contains('flyout-bottom')).toEqual(true);
      expect(flyoutTop.menu.classList.contains('flyout-align-end')).toEqual(true);

      expect(flyoutTop.menu.classList.contains('flyout-right')).toEqual(false);
      expect(flyoutTop.menu.classList.contains('flyout-align-start')).toEqual(false);

      expect(flyoutTop.menu.style.top).toEqual('0px');
      expect(flyoutTop.menu.style.right).toEqual('');
      expect(flyoutTop.menu.style.bottom).toEqual('');
      expect(flyoutTop.menu.style.left).toEqual('881px');
      expect(flyoutTop.menu.style.transform).toEqual('translate(-193px, 40px)');
    });

    it('should position the menu left when there is no space above, right, or below the trigger', () => {
      // Set small window height to restrict space
      window.innerWidth = 1024;
      window.innerHeight = 100;
      flyoutTop.boundingRect = boundingRectTopRight;
      flyoutTop.positionMenu();

      expect(flyoutTop.placement).toEqual('top');
      expect(flyoutTop.alignment).toEqual('start');
      expect(flyoutTop.currentPosition.placement).toEqual('left');
      expect(flyoutTop.currentPosition.alignment).toEqual('start');
      expect(flyoutTop.menu.classList.contains('flyout-left')).toEqual(true);
      expect(flyoutTop.menu.classList.contains('flyout-align-start')).toEqual(true);

      expect(flyoutTop.menu.classList.contains('flyout-bottom')).toEqual(false);
      expect(flyoutTop.menu.classList.contains('flyout-align-end')).toEqual(false);

      expect(flyoutTop.menu.style.top).toEqual('0px');
      expect(flyoutTop.menu.style.right).toEqual('');
      expect(flyoutTop.menu.style.bottom).toEqual('');
      expect(flyoutTop.menu.style.left).toEqual('881px');
      expect(flyoutTop.menu.style.transform).toEqual('translate(-336px, 0px)');
    });
  });

  describe('with reflow disabled', () => {
    beforeAll(() => {
      flyoutTop = new Flyout({
        el: document.querySelector('#controlDefault'),
        enableReflow: false,
        placement: 'top',
        alignment: 'center'
      });
    });

    it('should position the menu above the trigger, even if there is no space', () => {
      flyoutTop.boundingRect = boundingRectTopCenter;
      flyoutTop.positionMenu();

      expect(flyoutTop.placement).toEqual('top');
      expect(flyoutTop.alignment).toEqual('center');
      expect(flyoutTop.currentPosition.placement).toEqual('top');
      expect(flyoutTop.currentPosition.alignment).toEqual('center');
      expect(flyoutTop.menu.classList.contains('flyout-top')).toEqual(true);
      expect(flyoutTop.menu.classList.contains('flyout-align-center')).toEqual(true);

      expect(flyoutTop.menu.style.top).toEqual('0px');
      expect(flyoutTop.menu.style.right).toEqual('');
      expect(flyoutTop.menu.style.bottom).toEqual('');
      expect(flyoutTop.menu.style.left).toEqual('441px');
      expect(flyoutTop.menu.style.transform).toEqual('translate(-97px, -146px)');
    });
  });
});

// Right
describe('Flyout right', () => {
  let flyoutRight;

  describe('with reflow enabled', () => {
    beforeAll(() => {
      flyoutRight = new Flyout({
        el: document.querySelector('#controlDefault'),
        enableReflow: true,
        placement: 'right',
        alignment: 'start'
      });
    });

    afterAll(() => {
      // Reset the window to default size
      window.innerWidth = 1024;
      window.innerHeight = 768;
    });

    it('should position the menu right of the trigger', () => {
      flyoutRight.boundingRect = boundingRectCenter;
      flyoutRight.positionMenu();

      expect(flyoutRight.placement).toEqual('right');
      expect(flyoutRight.alignment).toEqual('start');
      expect(flyoutRight.currentPosition.placement).toEqual('right');
      expect(flyoutRight.currentPosition.alignment).toEqual('start');
      expect(flyoutRight.menu.classList.contains('flyout-right')).toEqual(true);
      expect(flyoutRight.menu.classList.contains('flyout-align-start')).toEqual(true);

      expect(flyoutRight.menu.style.top).toEqual('0px');
      expect(flyoutRight.menu.style.right).toEqual('');
      expect(flyoutRight.menu.style.bottom).toEqual('');
      expect(flyoutRight.menu.style.left).toEqual('441px');
      expect(flyoutRight.menu.style.transform).toEqual('translate(143px, 0px)');
    });

    it('should position the menu below when there is no space right of the trigger', () => {
      flyoutRight.boundingRect = boundingRectCenterRight;
      flyoutRight.positionMenu();

      expect(flyoutRight.placement).toEqual('right');
      expect(flyoutRight.alignment).toEqual('start');
      expect(flyoutRight.currentPosition.placement).toEqual('bottom');
      expect(flyoutRight.currentPosition.alignment).toEqual('end');
      expect(flyoutRight.menu.classList.contains('flyout-bottom')).toEqual(true);
      expect(flyoutRight.menu.classList.contains('flyout-align-end')).toEqual(true);

      expect(flyoutRight.menu.classList.contains('flyout-right')).toEqual(false);
      expect(flyoutRight.menu.classList.contains('flyout-align-start')).toEqual(false);

      expect(flyoutRight.menu.style.top).toEqual('0px');
      expect(flyoutRight.menu.style.right).toEqual('');
      expect(flyoutRight.menu.style.bottom).toEqual('');
      expect(flyoutRight.menu.style.left).toEqual('881px');
      expect(flyoutRight.menu.style.transform).toEqual('translate(-193px, 40px)');
    });

    it('should position the menu above when there is no space right or below the trigger', () => {
      flyoutRight.boundingRect = boundingRectBottomRight;
      flyoutRight.positionMenu();

      expect(flyoutRight.placement).toEqual('right');
      expect(flyoutRight.alignment).toEqual('start');
      expect(flyoutRight.currentPosition.placement).toEqual('top');
      expect(flyoutRight.currentPosition.alignment).toEqual('end');
      expect(flyoutRight.menu.classList.contains('flyout-top')).toEqual(true);
      expect(flyoutRight.menu.classList.contains('flyout-align-end')).toEqual(true);

      expect(flyoutRight.menu.classList.contains('flyout-bottom')).toEqual(false);

      expect(flyoutRight.menu.style.top).toEqual('0px');
      expect(flyoutRight.menu.style.right).toEqual('');
      expect(flyoutRight.menu.style.bottom).toEqual('');
      expect(flyoutRight.menu.style.left).toEqual('881px');
      expect(flyoutRight.menu.style.transform).toEqual('translate(-193px, -146px)');
    });

    it('should position the menu left when there is no space right, below, or above the trigger', () => {
      // Set small window height to restrict space
      window.innerWidth = 1024;
      window.innerHeight = 100;
      flyoutRight.boundingRect = boundingRectTopRight;
      flyoutRight.positionMenu();

      expect(flyoutRight.placement).toEqual('right');
      expect(flyoutRight.alignment).toEqual('start');
      expect(flyoutRight.currentPosition.placement).toEqual('left');
      expect(flyoutRight.currentPosition.alignment).toEqual('start');
      expect(flyoutRight.menu.classList.contains('flyout-left')).toEqual(true);
      expect(flyoutRight.menu.classList.contains('flyout-align-start')).toEqual(true);

      expect(flyoutRight.menu.classList.contains('flyout-top')).toEqual(false);
      expect(flyoutRight.menu.classList.contains('flyout-align-end')).toEqual(false);

      expect(flyoutRight.menu.style.top).toEqual('0px');
      expect(flyoutRight.menu.style.right).toEqual('');
      expect(flyoutRight.menu.style.bottom).toEqual('');
      expect(flyoutRight.menu.style.left).toEqual('881px');
      expect(flyoutRight.menu.style.transform).toEqual('translate(-336px, 0px)');
    });
  });

  describe('with reflow disabled', () => {
    beforeAll(() => {
      flyoutRight = new Flyout({
        el: document.querySelector('#controlDefault'),
        enableReflow: false,
        placement: 'right',
        alignment: 'center'
      });
    });

    it('should position the menu right of the trigger, even if there is no space', () => {
      flyoutRight.boundingRect = boundingRectCenterRight;
      flyoutRight.positionMenu();

      expect(flyoutRight.placement).toEqual('right');
      expect(flyoutRight.alignment).toEqual('center');
      expect(flyoutRight.currentPosition.placement).toEqual('right');
      expect(flyoutRight.currentPosition.alignment).toEqual('center');
      expect(flyoutRight.menu.classList.contains('flyout-right')).toEqual(true);
      expect(flyoutRight.menu.classList.contains('flyout-align-center')).toEqual(true);

      expect(flyoutRight.menu.style.top).toEqual('0px');
      expect(flyoutRight.menu.style.right).toEqual('');
      expect(flyoutRight.menu.style.bottom).toEqual('');
      expect(flyoutRight.menu.style.left).toEqual('881px');
      expect(flyoutRight.menu.style.transform).toEqual('translate(143px, -53px)');
    });
  });
});

// Bottom
describe('Flyout bottom', () => {
  let flyoutBottom;

  describe('with reflow enabled', () => {
    beforeAll(() => {
      flyoutBottom = new Flyout({
        el: document.querySelector('#controlDefault'),
        enableReflow: true,
        placement: 'bottom',
        alignment: 'start'
      });
    });

    afterAll(() => {
      // Reset the window to default size
      window.innerWidth = 1024;
      window.innerHeight = 768;
    });

    it('should position the menu below the trigger', () => {
      flyoutBottom.boundingRect = boundingRectCenter;
      flyoutBottom.positionMenu();

      expect(flyoutBottom.placement).toEqual('bottom');
      expect(flyoutBottom.alignment).toEqual('start');
      expect(flyoutBottom.currentPosition.placement).toEqual('bottom');
      expect(flyoutBottom.currentPosition.alignment).toEqual('start');
      expect(flyoutBottom.menu.classList.contains('flyout-bottom')).toEqual(true);
      expect(flyoutBottom.menu.classList.contains('flyout-align-start')).toEqual(true);

      expect(flyoutBottom.menu.style.top).toEqual('0px');
      expect(flyoutBottom.menu.style.right).toEqual('');
      expect(flyoutBottom.menu.style.bottom).toEqual('');
      expect(flyoutBottom.menu.style.left).toEqual('441px');
      expect(flyoutBottom.menu.style.transform).toEqual('translate(0px, 40px)');
    });

    it('should position the menu right when there is no space below the trigger', () => {
      flyoutBottom.boundingRect = boundingRectBottomCenter;
      flyoutBottom.positionMenu();

      expect(flyoutBottom.placement).toEqual('bottom');
      expect(flyoutBottom.alignment).toEqual('start');
      expect(flyoutBottom.currentPosition.placement).toEqual('right');
      expect(flyoutBottom.currentPosition.alignment).toEqual('end');
      expect(flyoutBottom.menu.classList.contains('flyout-right')).toEqual(true);
      expect(flyoutBottom.menu.classList.contains('flyout-align-end')).toEqual(true);

      expect(flyoutBottom.menu.classList.contains('flyout-bottom')).toEqual(false);
      expect(flyoutBottom.menu.classList.contains('flyout-align-start')).toEqual(false);

      expect(flyoutBottom.menu.style.top).toEqual('0px');
      expect(flyoutBottom.menu.style.right).toEqual('');
      expect(flyoutBottom.menu.style.bottom).toEqual('');
      expect(flyoutBottom.menu.style.left).toEqual('441px');
      expect(flyoutBottom.menu.style.transform).toEqual('translate(143px, -106px)');
    });

    it('should position the menu above when there is no space below or right of the trigger', () => {
      flyoutBottom.boundingRect = boundingRectBottomRight;
      flyoutBottom.positionMenu();

      expect(flyoutBottom.placement).toEqual('bottom');
      expect(flyoutBottom.alignment).toEqual('start');
      expect(flyoutBottom.currentPosition.placement).toEqual('top');
      expect(flyoutBottom.currentPosition.alignment).toEqual('end');
      expect(flyoutBottom.menu.classList.contains('flyout-top')).toEqual(true);
      expect(flyoutBottom.menu.classList.contains('flyout-align-end')).toEqual(true);

      expect(flyoutBottom.menu.classList.contains('flyout-right')).toEqual(false);

      expect(flyoutBottom.menu.style.top).toEqual('0px');
      expect(flyoutBottom.menu.style.right).toEqual('');
      expect(flyoutBottom.menu.style.bottom).toEqual('');
      expect(flyoutBottom.menu.style.left).toEqual('881px');
      expect(flyoutBottom.menu.style.transform).toEqual('translate(-193px, -146px)');
    });

    it('should position the menu left when there is no space below, right, or above the trigger', () => {
      // Set small window height to restrict space
      window.innerWidth = 1024;
      window.innerHeight = 100;
      flyoutBottom.boundingRect = boundingRectTopRight;
      flyoutBottom.positionMenu();

      expect(flyoutBottom.placement).toEqual('bottom');
      expect(flyoutBottom.alignment).toEqual('start');
      expect(flyoutBottom.currentPosition.placement).toEqual('left');
      expect(flyoutBottom.currentPosition.alignment).toEqual('start');
      expect(flyoutBottom.menu.classList.contains('flyout-left')).toEqual(true);
      expect(flyoutBottom.menu.classList.contains('flyout-align-start')).toEqual(true);

      expect(flyoutBottom.menu.classList.contains('flyout-top')).toEqual(false);
      expect(flyoutBottom.menu.classList.contains('flyout-align-end')).toEqual(false);

      expect(flyoutBottom.menu.style.top).toEqual('0px');
      expect(flyoutBottom.menu.style.right).toEqual('');
      expect(flyoutBottom.menu.style.bottom).toEqual('');
      expect(flyoutBottom.menu.style.left).toEqual('881px');
      expect(flyoutBottom.menu.style.transform).toEqual('translate(-336px, 0px)');
    });
  });

  describe('with reflow disabled', () => {
    beforeAll(() => {
      flyoutBottom = new Flyout({
        el: document.querySelector('#controlDefault'),
        enableReflow: false,
        placement: 'bottom',
        alignment: 'center'
      });
    });

    it('should position the menu below the trigger, even if there is no space', () => {
      flyoutBottom.boundingRect = boundingRectCenterRight;
      flyoutBottom.positionMenu();

      expect(flyoutBottom.placement).toEqual('bottom');
      expect(flyoutBottom.alignment).toEqual('center');
      expect(flyoutBottom.currentPosition.placement).toEqual('bottom');
      expect(flyoutBottom.currentPosition.alignment).toEqual('center');
      expect(flyoutBottom.menu.classList.contains('flyout-bottom')).toEqual(true);
      expect(flyoutBottom.menu.classList.contains('flyout-align-center')).toEqual(true);

      expect(flyoutBottom.menu.style.top).toEqual('0px');
      expect(flyoutBottom.menu.style.right).toEqual('');
      expect(flyoutBottom.menu.style.bottom).toEqual('');
      expect(flyoutBottom.menu.style.left).toEqual('881px');
      expect(flyoutBottom.menu.style.transform).toEqual('translate(-97px, 40px)');
    });
  });
});

// Left
describe('Flyout left', () => {
  let flyoutLeft;

  describe('with reflow enabled', () => {
    beforeAll(() => {
      flyoutLeft = new Flyout({
        el: document.querySelector('#controlDefault'),
        enableReflow: true,
        placement: 'left',
        alignment: 'start'
      });
    });

    afterAll(() => {
      // Reset the window to default size
      window.innerWidth = 1024;
      window.innerHeight = 768;
    });

    it('should position the menu left of the trigger', () => {
      flyoutLeft.boundingRect = boundingRectCenter;
      flyoutLeft.positionMenu();

      expect(flyoutLeft.placement).toEqual('left');
      expect(flyoutLeft.alignment).toEqual('start');
      expect(flyoutLeft.currentPosition.placement).toEqual('left');
      expect(flyoutLeft.currentPosition.alignment).toEqual('start');
      expect(flyoutLeft.menu.classList.contains('flyout-left')).toEqual(true);
      expect(flyoutLeft.menu.classList.contains('flyout-align-start')).toEqual(true);

      expect(flyoutLeft.menu.style.top).toEqual('0px');
      expect(flyoutLeft.menu.style.right).toEqual('');
      expect(flyoutLeft.menu.style.bottom).toEqual('');
      expect(flyoutLeft.menu.style.left).toEqual('441px');
      expect(flyoutLeft.menu.style.transform).toEqual('translate(-336px, 0px)');
    });

    it('should position the menu below when there is no space left of the trigger', () => {
      flyoutLeft.boundingRect = boundingRectCenterLeft;
      flyoutLeft.positionMenu();

      expect(flyoutLeft.placement).toEqual('left');
      expect(flyoutLeft.alignment).toEqual('start');
      expect(flyoutLeft.currentPosition.placement).toEqual('bottom');
      expect(flyoutLeft.currentPosition.alignment).toEqual('start');
      expect(flyoutLeft.menu.classList.contains('flyout-bottom')).toEqual(true);
      expect(flyoutLeft.menu.classList.contains('flyout-align-start')).toEqual(true);

      expect(flyoutLeft.menu.classList.contains('flyout-left')).toEqual(false);

      expect(flyoutLeft.menu.style.top).toEqual('0px');
      expect(flyoutLeft.menu.style.right).toEqual('');
      expect(flyoutLeft.menu.style.bottom).toEqual('');
      expect(flyoutLeft.menu.style.left).toEqual('0px');
      expect(flyoutLeft.menu.style.transform).toEqual('translate(0px, 40px)');
    });

    it('should position the menu above when there is no space left or below the trigger', () => {
      flyoutLeft.boundingRect = boundingRectBottomLeft;
      flyoutLeft.positionMenu();

      expect(flyoutLeft.placement).toEqual('left');
      expect(flyoutLeft.alignment).toEqual('start');
      expect(flyoutLeft.currentPosition.placement).toEqual('top');
      expect(flyoutLeft.currentPosition.alignment).toEqual('start');
      expect(flyoutLeft.menu.classList.contains('flyout-top')).toEqual(true);
      expect(flyoutLeft.menu.classList.contains('flyout-align-start')).toEqual(true);

      expect(flyoutLeft.menu.classList.contains('flyout-bottom')).toEqual(false);

      expect(flyoutLeft.menu.style.top).toEqual('0px');
      expect(flyoutLeft.menu.style.right).toEqual('');
      expect(flyoutLeft.menu.style.bottom).toEqual('');
      expect(flyoutLeft.menu.style.left).toEqual('0px');
      expect(flyoutLeft.menu.style.transform).toEqual('translate(0px, -146px)');
    });

    it('should position the menu right when there is no space left, below, or above the trigger', () => {
      // Set small window height to restrict space
      window.innerWidth = 1024;
      window.innerHeight = 100;
      flyoutLeft.boundingRect = boundingRectTopLeft;
      flyoutLeft.positionMenu();

      expect(flyoutLeft.placement).toEqual('left');
      expect(flyoutLeft.alignment).toEqual('start');
      expect(flyoutLeft.currentPosition.placement).toEqual('right');
      expect(flyoutLeft.currentPosition.alignment).toEqual('start');
      expect(flyoutLeft.menu.classList.contains('flyout-right')).toEqual(true);
      expect(flyoutLeft.menu.classList.contains('flyout-align-start')).toEqual(true);

      expect(flyoutLeft.menu.classList.contains('flyout-top')).toEqual(false);

      expect(flyoutLeft.menu.style.top).toEqual('0px');
      expect(flyoutLeft.menu.style.right).toEqual('');
      expect(flyoutLeft.menu.style.bottom).toEqual('');
      expect(flyoutLeft.menu.style.left).toEqual('0px');
      expect(flyoutLeft.menu.style.transform).toEqual('translate(143px, 0px)');
    });
  });

  describe('with reflow disabled', () => {
    beforeAll(() => {
      flyoutLeft = new Flyout({
        el: document.querySelector('#controlDefault'),
        enableReflow: false,
        placement: 'left',
        alignment: 'center'
      });
    });

    it('should position the menu left of the trigger, even if there is no space', () => {
      flyoutLeft.boundingRect = boundingRectCenterLeft;
      flyoutLeft.positionMenu();

      expect(flyoutLeft.placement).toEqual('left');
      expect(flyoutLeft.alignment).toEqual('center');
      expect(flyoutLeft.currentPosition.placement).toEqual('left');
      expect(flyoutLeft.currentPosition.alignment).toEqual('center');
      expect(flyoutLeft.menu.classList.contains('flyout-left')).toEqual(true);
      expect(flyoutLeft.menu.classList.contains('flyout-align-center')).toEqual(true);

      expect(flyoutLeft.menu.style.top).toEqual('0px');
      expect(flyoutLeft.menu.style.right).toEqual('');
      expect(flyoutLeft.menu.style.bottom).toEqual('');
      expect(flyoutLeft.menu.style.left).toEqual('0px');
      expect(flyoutLeft.menu.style.transform).toEqual('translate(-336px, -53px)');
    });
  });
});
