import Util from '../../js/util';

export const Selector = {
  DATA_MOUNT: '[data-mount="click-group"]'
};

export const EventName = {
  ON_CLICK: 'onClick',
  ON_REMOVE: 'onRemove',
  ON_UPDATE: 'onUpdate'
};

const clickGroups = [];

/**
 * Private functions.
 */

function _getTarget() {
  const selector = this.el.dataset.target;
  if (selector) {
    return document.querySelector(`#${selector}`);
  }

  const firstLink = this.el.getElementsByTagName('a')[0];
  return firstLink ? firstLink : null;
}

function _onElClick(e) {
  if (e.target !== this.target) {
    this.el.dispatchEvent(this[EventName.ON_CLICK]);
    this.target.click();
  }
}

/**
 * Class representing a click group.
 */
class ClickGroup {
  /**
   * Create the click group.
   * @param {Object} opts - The click group options.
   * @param {Node} opts.el - The click group DOM node.
   * @param {Node} [opts.target] - Node that contains the target of the click group.
   * @param {Function} [opts.onClick] - Function to override the click group click handler.
   */
  constructor(opts) {
    this.el = opts.el;
    this.target = opts.target || _getTarget.bind(this)();
    this.onClick = opts.onClick || _onElClick.bind(this);

    // Check for multiple links and/or buttons, which would present an a11y problem
    if (this.el.querySelectorAll('a, button').length > 1) {
      this.target = null;
      // TODO: add error message notifying multiple clickable descendants found
    }

    if (this.target) {
      this.el.style.cursor = 'pointer';
      this.events = [{ el: this.el, type: 'click', handler: this.onClick }];
      Util.addEvents(this.events);
    } // TODO: add error message in an else block, notifying clickable target not found

    // Create custom events
    this[EventName.ON_CLICK] = new CustomEvent(EventName.ON_CLICK, { bubbles: true, cancelable: true });

    clickGroups.push(this);
  }

  /**
   * Update the click group.
   * @param {Object} opts - The click group options.
   * @param {Function} [opts.onClick] - Function to override the click group click handler.
   * @param {Node} [opts.target] - Node that contains the target of the click group.
   */
  update(opts = {}) {
    if (opts) {
      if (opts.onClick) {
        this.onClick = opts.onClick;
      }

      if (opts.target) {
        this.target = opts.target;
      }

      if ((opts.onClick || opts.target) && this.target && this.onClick) {
        Util.removeEvents(this.events);
        this.events = [{ el: this.el, type: 'click', handler: this.onClick }];
        Util.addEvents(this.events);
      }
    }

    // Create and dispatch custom event
    this[EventName.ON_UPDATE] = new CustomEvent(EventName.ON_UPDATE, { bubbles: true });
    this.el.dispatchEvent(this[EventName.ON_UPDATE]);
  }

  /**
   * Remove the click group.
   */
  remove() {
    if (this.target) {
      this.el.style.cursor = '';
      Util.removeEvents(this.events);
    }

    const index = clickGroups.indexOf(this);
    clickGroups.splice(index, 1);

    // Create and dispatch custom event
    this[EventName.ON_REMOVE] = new CustomEvent(EventName.ON_REMOVE, { bubbles: true });
    this.el.dispatchEvent(this[EventName.ON_REMOVE]);
  }

  /**
   * Get an array of click group instances.
   * @returns {Object[]} Array of click group instances.
   */
  static getInstances() {
    return clickGroups;
  }
}

export default ClickGroup;
