import Util from '../../js/util';

const controlElements = [];
// YIQ Threshold for color changes
const yiqContrastedThreshold = 128;
export const EventName = {
  ON_CHANGE: 'onChange',
  ON_REMOVE: 'onRemove',
  CHANGE: 'change'
};

export const Selector = {
  COLOR_PICKER_DOT: '.color-picker-dot'
};

export const Attributes = {
  DATA_CONTROLS: 'data-controls',
  IMAGE: 'data-color-picker-image',
  ID: 'id',
  SRC: 'src'
};

export const ClassName = {
  COLOR_LIGHT: 'color-picker-dot-light'
};

/**
 * Perform the calculations to figure out color of elements
 */
function _initializeColor() {
  const id = this.el.getAttribute(Attributes.ID);
  const label = this.el.parentNode.querySelector(`label[for="${id}"]`);
  const { backgroundColor } = label.querySelector(Selector.COLOR_PICKER_DOT).style;
  const rgbObject = Util.getRGB(backgroundColor);
  const darkColor = { r: 0, g: 0, b: 0 };
  const darkYiq = Util.getYiq(darkColor);
  const bgYiq = Util.getYiq(rgbObject);
  if (Math.floor(Math.abs(bgYiq - darkYiq) > yiqContrastedThreshold)) {
    label.classList.add(ClassName.COLOR_LIGHT);
  }
}

export default class ColorPickerControl {
  constructor(opts) {
    this.el = opts.el;
    this.containerTarget = opts.containerTarget;
    _initializeColor.bind(this)();
    this.events = [
      {
        el: this.el,
        type: EventName.CHANGE,
        handler: e => this._controlListener(e, this.containerTarget)
      }
    ];

    Util.addEvents(this.events);

    controlElements.push(this);
  }

  /**
   * Event handler for change events
   * @param {event} e Event
   * @param {string} imageContainer a reference to the image container
   */
  _controlListener(e, imageContainer) {
    if (imageContainer) {
      const nodeName = imageContainer.nodeName.toLowerCase();
      const imageUrl = e.target.getAttribute(Attributes.IMAGE);
      const event = new CustomEvent(EventName.ON_CHANGE, {
        element: imageContainer.getAttribute(Attributes.ID),
        imageUrl
      });
      if (imageUrl) {
        // Figure out whether it's an image element or not
        if (nodeName === 'img') {
          imageContainer.setAttribute(Attributes.SRC, imageUrl);
        } else {
          imageContainer.style.backgroundImage = `url(${imageUrl})`;
        }

        imageContainer.dispatchEvent(event);
      }
    }
  }

  /**
   * Get an array of color picker control instances
   * @returns {ColorPickerControl[]} color picker control instances
   */
  static getInstances() {
    return controlElements;
  }

  /**
   * Remove the color picker control instance
   */
  remove() {
    Util.removeEvents(this.events);

    const index = controlElements.indexOf(this);
    controlElements.splice(index, 1);

    // Create and dispatch custom event
    this[EventName.ON_REMOVE] = new CustomEvent(EventName.ON_REMOVE, { bubbles: true });
    this.el.dispatchEvent(this[EventName.ON_REMOVE]);
  }
}
