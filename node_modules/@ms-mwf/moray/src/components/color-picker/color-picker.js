import Util from '../../js/util';
import ColorPickerControl from './color-picker-control';

export const Selector = {
  CONTROL: 'input',
  DATA_MOUNT: '[data-mount="color-picker"]',
  CHECKED: ':checked'
};

export const Attributes = {
  DATA_CONTROLS: 'data-controls',
  IMAGE: 'data-color-picker-image'
};

const colorPickers = [];

function _initializeImageSrc() {
  // Find all the fieldsets that have a target
  const currentFieldSet = this.el;
  const nodeName = this.containerTarget ? this.containerTarget.nodeName.toLowerCase() : null;
  const defaultElement = currentFieldSet.querySelector(Selector.CHECKED);
  // Set the default selected image
  if (defaultElement) {
    const imageUrl = defaultElement.getAttribute(Attributes.IMAGE);
    if (imageUrl && nodeName) {
      if (nodeName === 'img') {
        this.containerTarget.setAttribute('src', imageUrl);
      } else {
        this.containerTarget.style.backgroundImage = `url(${imageUrl})`;
      }
    }
  }
}

/**
 * Initializes an instance, helper for constructor and update function
 * @param {Object} opts the ColorPicker init options
 * @returns {Object} the initialized or update instance of ColorPicker
 */
function _initInstance(opts) {
  // TODO remove old "opts.target" API
  this.el = (opts && opts.el) || (opts && opts.target) || this.el;
  if (opts && opts.target) {
    console.warn(
      'Warning: the ColorPicker "target" option is deprecated and will be removed in favor of "el" in a future version'
    );
  }

  if (!this.el) {
    // abort init if no valid base element
    return this;
  }

  const controlElement = this.el.getAttribute(Attributes.DATA_CONTROLS);
  if (controlElement) {
    this.containerTarget = document.querySelector(`#${controlElement}`);
    _initializeImageSrc.call(this);
  }

  this.controls = [];
  const controls = this.el.querySelectorAll(Selector.CONTROL);
  // Iterate through our controls, adding an event listener to change the image
  controls.forEach(control => {
    this.controls.push(
      new ColorPickerControl({
        el: control,
        containerTarget: this.containerTarget
      })
    );
  });

  return this;
}

/**
 * Class for ColorPicker overall. Spawns instances of ColorPickerControl for each color
 */
class ColorPicker {
  /**
   * Construct instance of ColorPicker
   * @param {Object} opts - The ColorPicker options.
   * @param {Node} opts.el - The ColorPicker DOM node.
   */
  constructor(opts) {
    // initialize the instance and push it to the master list
    colorPickers.push(_initInstance.call(this, opts));
  }

  /**
   * Get an array of color picker instances
   * @returns {ColorPicker[]} color picker instances
   */
  static getInstances() {
    return colorPickers;
  }

  /**
   * Re-initializes the instance
   * @param {Object} opts - The ColorPicker options.
   * @param {Node} [opts.el] - The ColorPicker DOM node.
   */
  update(opts) {
    Util.tearDownComponentList(this.controls);
    _initInstance.call(this, opts);
  }

  /**
   * Remove the color picker instance
   */
  remove() {
    // Call remove on each of the ColorPickerControls
    Util.tearDownComponentList(this.controls);

    const index = colorPickers.indexOf(this);
    colorPickers.splice(index, 1);
  }
}

export default ColorPicker;
