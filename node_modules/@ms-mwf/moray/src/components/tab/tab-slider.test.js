import TabSlider, { ClassName, Selector, Direction, Attribute, EventName } from './tab-slider';
import { EventName as TabEventName } from './tab';
import 'intersection-observer';

const html = `
  <div class="col-12" data-mount="tab-slider">
    <div class="${ClassName.TAB_OVERFLOW}">
      <div class="${ClassName.TAB_WINDOW}">
        <div class="${ClassName.TAB_GROUP}" role="tablist" aria-label="explicit aria label describing tab list">
          <button id="tab1-tab" class="glyph-prepend glyph-prepend-system" href="#tab1" role="tab" data-mount="tab" aria-controls="tab1" aria-selected="false" tabindex="-1">
            <span class="text-glyph"></span>
            <span>1 This shows max characters</span>
          </button>
          <button id="tab2-tab" class="glyph-prepend glyph-prepend-system" href="#tab2" role="tab" data-mount="tab" aria-controls="tab2" aria-selected="false" tabindex="-1">
            <span class="text-glyph"></span>
            <span>2 This shows max characters</span>
          </button>
          <button id="tab3-tab" class="active glyph-prepend glyph-prepend-system" href="#tab3" role="tab" data-mount="tab" aria-controls="tab3" aria-selected="true">
            <span class="text-glyph"></span>
            <span>3 This shows max characters</span>
          </button>
          <button id="tab4-tab" class="glyph-prepend glyph-prepend-system" href="#tab4" role="tab" data-mount="tab" aria-controls="tab4" aria-selected="false" tabindex="-1">
            <span class="text-glyph"></span>
            <span>4 This shows max characters</span>
          </button>
          <button id="tab5-tab" class="glyph-prepend glyph-prepend-system" href="#tab5" role="tab" data-mount="tab" aria-controls="tab5" aria-selected="false" tabindex="-1">
            <span class="text-glyph"></span>
            <span>5 This shows max characters</span>
          </button>
          <button id="tab6-tab" class="glyph-prepend glyph-prepend-system" href="#tab6" role="tab" data-mount="tab" aria-controls="tab6" aria-selected="false" tabindex="-1">
            <span class="text-glyph"></span>
            <span>6 This shows max characters</span>
          </button>
          <button id="tab7-tab" class="glyph-prepend glyph-prepend-system" href="#tab7" role="tab" data-mount="tab" aria-controls="tab7" aria-selected="false" tabindex="-1">
            <span class="text-glyph"></span>
            <span>7 This shows max characters</span>
          </button>
          <button id="tab8-tab" class="glyph-prepend glyph-prepend-system" href="#tab8" role="tab" data-mount="tab" aria-controls="tab8" aria-selected="false" tabindex="-1">
            <span class="text-glyph"></span>
            <span>8 This shows max characters</span>
          </button>
          <button id="tab9-tab" class="glyph-prepend glyph-prepend-system" href="#tab9" role="tab" data-mount="tab" aria-controls="tab9" aria-selected="false" tabindex="-1">
            <span class="text-glyph"></span>
            <span>9 This shows max characters</span>
          </button>
          <button id="tab10-tab" class="glyph-prepend glyph-prepend-system" href="#tab10" role="tab" data-mount="tab" aria-controls="tab10" aria-selected="false" tabindex="-1">
            <span class="text-glyph"></span>
            <span>10 This shows max characters</span>
          </button>
        </div>
      </div>
    </div>
    <div class="${ClassName.ARROWS}">
      <button type="button" class="${ClassName.ARROW_PREV}" tabindex="-1" aria-hidden="true" data-width="40">
        <span class="sr-only">Press enter on previous arrow to view last items</span>
      </button>
      <button type="button" class="${ClassName.ARROW_NEXT}" tabindex="-1" aria-hidden="true" data-width="40">
        <span class="sr-only">Press enter on next arrow to view more items</span>
      </button>
    </div>
  </div>
`;

document.body.innerHTML = html;
const tabSlider = document.querySelector(Selector.DATA_MOUNT);

describe(TabSlider.name, () => {
  beforeEach(() => {
    // clear all TabSlider instances
    while (TabSlider.getInstances().length) {
      TabSlider.getInstances()[0].remove();
    }
  });

  it('should be able to be initialized', () => {
    document.querySelectorAll(Selector.DATA_MOUNT).forEach(node => {
      new TabSlider({ el: node });
    });
    const instances = TabSlider.getInstances();
    expect(instances.length).toEqual(1);
    expect(instances[0].el).not.toBe(null);
  });

  it('should be able to be updated with options passed in', () => {
    const mock = jest.fn();
    const instance = new TabSlider({ el: tabSlider });
    instance.update({
      onPrevArrowClick: mock,
      onNextArrowClick: mock,
      onWindowResize: mock,
      onScrollEvent: mock,
      onFocusEvent: mock,
      scrollIntoView: false
    });
    expect(instance.onPrevArrowClick).toEqual(mock);
    expect(instance.onNextArrowClick).toEqual(mock);
    expect(instance.onWindowResize).toEqual(mock);
    expect(instance.onScrollEvent).toEqual(mock);
    expect(instance.onFocusEvent).toEqual(mock);
    expect(instance.scrollIntoView).toBe(false);
  });

  it('should update index of target tab index on focus', () => {
    const instance = new TabSlider({ el: tabSlider });
    const indexTarget = 2;
    instance.tabListItems[indexTarget].focus();
    expect(instance.tabSlideTarget.index).toEqual(indexTarget);
  });

  it('should update internal arrow direction value to right', () => {
    const instance = new TabSlider({ el: tabSlider });
    instance.onClickNextArrow();
    expect(instance.arrowDirection).toEqual(Direction.RIGHT);
  });

  it('should update internal arrow direction value to left', () => {
    const instance = new TabSlider({ el: tabSlider });
    instance.onClickPrevArrow();
    expect(instance.arrowDirection).toEqual(Direction.LEFT);
  });

  it('should be able to be removed', () => {
    const instance = new TabSlider({ el: tabSlider });
    instance.remove();
    expect(TabSlider.getInstances().length).toEqual(0);
  });

  describe('scroll-into-view behavior', () => {
    beforeEach(() => {
      HTMLElement.prototype.scrollIntoView = jest.fn();
    });

    afterAll(() => {
      delete HTMLElement.prototype.scrollIntoView;
    });

    it('scrolls selected tab to center of tab container by default', () => {
      const instance = new TabSlider({ el: tabSlider });
      const tab2 = instance.tabListItems[1];
      // fire tab show() event directly without new Tab class
      tab2.dispatchEvent(new Event(TabEventName.SHOW));
      expect(tab2.scrollIntoView).toBeCalledWith({
        behavior: 'smooth',
        inline: 'center',
        block: 'nearest'
      });
    });

    it('does NOT scroll selected tab into view when `scrollIntoView` option is `false`', () => {
      const instance = new TabSlider({ el: tabSlider, scrollIntoView: false });
      const tab2 = instance.tabListItems[1];
      // fire tab show() event directly without new Tab class
      tab2.dispatchEvent(new Event(TabEventName.SHOW));

      expect(tab2.scrollIntoView).not.toBeCalled();
    });

    it(`does NOT scroll selected tab into view when DOM attribute ${Attribute.DATA_DISABLE_SCROLL_INTO_VIEW} is present`, () => {
      tabSlider.setAttribute(Attribute.DATA_DISABLE_SCROLL_INTO_VIEW, '');
      const instance = new TabSlider({ el: tabSlider });
      const tab2 = instance.tabListItems[1];
      // fire tab show() event directly without new Tab class
      tab2.dispatchEvent(new Event(TabEventName.SHOW));

      expect(tab2.scrollIntoView).not.toBeCalled();

      // reset DOM
      tabSlider.removeAttribute(Attribute.DATA_DISABLE_SCROLL_INTO_VIEW);
    });
  });

  describe('tab scrolling behavior with preventDefault', () => {
    it('should cancel scroll on next arrow click when default is prevented', () => {
      const instance = new TabSlider({ el: tabSlider });
      instance.arrowNext.click = jest.fn();
      instance.el.dispatchEvent = jest.fn(e => e.preventDefault());
      instance.onClickNextArrow();

      expect(instance.el.dispatchEvent).toBeCalled();
      expect(instance.el.dispatchEvent.mock.calls[0][0].type).toBe(EventName.ON_SCROLL);
      expect(instance.el.dispatchEvent.mock.calls[0][0].defaultPrevented).toBe(true);
      expect(instance.arrowNext.click).not.toBeCalled();
    });

    it('should cancel scroll on prev arrow click when default is prevented', () => {
      const instance = new TabSlider({ el: tabSlider });
      instance.arrowPrev.click = jest.fn();
      instance.el.dispatchEvent = jest.fn(e => e.preventDefault());
      instance.onClickPrevArrow();

      expect(instance.el.dispatchEvent).toBeCalled();
      expect(instance.el.dispatchEvent.mock.calls[0][0].type).toBe(EventName.ON_SCROLL);
      expect(instance.el.dispatchEvent.mock.calls[0][0].defaultPrevented).toBe(true);
      expect(instance.arrowPrev.click).not.toBeCalled();
    });
  });
});
