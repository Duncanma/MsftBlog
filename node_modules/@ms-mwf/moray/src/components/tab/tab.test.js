import Tab, { EventName, Selector, ClassName } from './tab';
import Util from '../../js/util';

const tabs = `
  <div class="tab-group" role="tablist">
    <a id="tab1-tab" class="active" href="#tab1" role="tab" data-mount="tab" aria-controls="tab1" aria-selected="true">Tab 1</a>
    <a id="tab2-tab" href="#tab2" role="tab" data-mount="tab" aria-controls="tab2" aria-selected="false" tabindex="-1">Tab 2</a>
  </div>
`;

const panels = `
  <div class="tab-panel-group">
    <div id="tab1" class="active" role="tabpanel" aria-labelledby="tab1-tab" tabindex="0">Tab 1 panel</div>
    <div id="tab2" role="tabpanel" aria-labelledby="tab2-tab" tabindex="0">
      Tab 2 panel
      <div id="tab2child">Tab 2 panel child</div>
    </div>
    <a data-focus="back-to-tabs">Back to tabs</a>
  </div>
`;

const listTabs = `
  <ul class="tab-group" role="tablist">
    <li>
      <a id="tab1-tab" class="active" href="#tab1" role="tab" data-mount="tab" aria-controls="tab1" aria-selected="true">Tab 1</a>
    </li>
    <li>
      <a id="tab2-tab" href="#tab2" role="tab" data-mount="tab" aria-controls="tab2" aria-selected="false" tabindex="-1">Tab 2</a>
    </li>
  </ul>
`;

document.body.innerHTML = tabs + panels;

describe(Tab.name, () => {
  let tab1;
  let tab2;

  beforeEach(() => {
    tab1 = new Tab({ el: document.getElementById('tab1-tab') });
    tab2 = new Tab({ el: document.getElementById('tab2-tab') });

    HTMLElement.prototype.scrollIntoView = jest.fn();
  });

  afterEach(() => {
    jest.clearAllMocks();
    document.body.innerHTML = tabs + panels;
    tab1.remove();
    tab2.remove();
    window.history.pushState('', document.title, window.location.pathname);
  });

  describe('constructor()', () => {
    beforeEach(() => {
      tab2.show = jest.fn();
    });

    it('should show the tab panel with id that matches the hash', () => {
      const tab2Id = '#tab2';
      window.location.href = window.location.pathname + tab2Id;
      window.dispatchEvent(new Event(EventName.POP_STATE));
      expect(tab2.show).toBeCalled();
      expect(document.querySelector(tab2Id).scrollIntoView).toBeCalled();
    });

    it('should show the tab panel with child with id that matches the hash', () => {
      const tabContent = document.querySelector('.tab-panel-group');
      const tab2ChildId = '#tab2child';
      window.location.href = window.location.pathname + tab2ChildId;
      window.dispatchEvent(new Event(EventName.POP_STATE));
      expect(tab2.show).toBeCalled();
      tabContent.dispatchEvent(new Event(Util.TRANSITION_END));
      expect(document.querySelector(tab2ChildId).scrollIntoView).toBeCalled();
    });
  });

  describe('getInstances()', () => {
    it('should return the number of instances', () => {
      const instances = Tab.getInstances();
      expect(instances.length).toEqual(2);
      expect(instances[0].el).toBeInstanceOf(Node);
      expect(instances[1].el).toBeInstanceOf(Node);
    });
  });

  describe('show()', () => {
    describe('With event emitters', () => {
      let previous;

      beforeEach(() => {
        tab2.el.dispatchEvent = jest.fn();
        previous = tab2.el.parentNode.querySelector(Selector.ACTIVE);
        previous.dispatchEvent = jest.fn();
        tab2.show();
      });

      it('triggers the events', () => {
        expect(tab2.el.dispatchEvent).toBeCalled();
        expect(tab2.el.dispatchEvent.mock.calls[0][0].type).toBe(EventName.SHOW);
        expect(previous.dispatchEvent).toBeCalled();
        expect(previous.dispatchEvent.mock.calls[0][0].type).toBe(EventName.HIDE);
      });
    });

    describe('Default hash update', () => {
      let replaceStateSpy;
      let pushStateSpy;

      beforeEach(() => {
        replaceStateSpy = jest.spyOn(window.history, 'replaceState');
        pushStateSpy = jest.spyOn(window.history, 'pushState');
        tab2.show();
      });

      it('should update the hash with replaceState', () => {
        expect(window.location.hash).toBe('#tab2');
        expect(replaceStateSpy).toBeCalled();
        expect(pushStateSpy).not.toBeCalled();
      });
    });

    describe('Hash update with pushstate option', () => {
      let replaceStateSpy;
      let pushStateSpy;

      beforeEach(() => {
        document.body.innerHTML = tabs + panels;
        tab1.remove();
        tab2.remove();
        tab1 = new Tab({ el: document.getElementById('tab1-tab'), addUrlToHistory: true });
        tab2 = new Tab({ el: document.getElementById('tab2-tab'), addUrlToHistory: true });

        replaceStateSpy = jest.spyOn(window.history, 'replaceState');
        pushStateSpy = jest.spyOn(window.history, 'pushState');
        tab2.show();
      });

      it('should update the hash with replaceState', () => {
        expect(window.location.hash).toBe('#tab2');
        expect(replaceStateSpy).not.toBeCalled();
        expect(pushStateSpy).toBeCalled();
      });
    });

    describe('With the fade class', () => {
      let transitionUtil;
      beforeEach(() => {
        document.getElementById('tab1').classList.add(ClassName.FADE);
        document.getElementById('tab2').classList.add(ClassName.FADE);
        transitionUtil = jest.spyOn(Util, 'emulateTransitionEnd');
        tab2.show();
      });
      it('utilizes transition methods', () => {
        expect(transitionUtil).toHaveBeenCalled();
      });
    });

    describe('With tabs in a list', () => {
      beforeEach(() => {
        document.body.innerHTML = listTabs + panels;
        tab1 = new Tab({ el: document.getElementById('tab1-tab') });
        tab2 = new Tab({ el: document.getElementById('tab2-tab') });
        tab2.show();
      });

      afterEach(() => {
        tab1.remove();
        tab2.remove();
      });

      it('shows the correct tab', () => {
        const activeListItem = document.querySelector('ul li:nth-child(2)');
        expect(tab2.el.parentNode).toBe(activeListItem);
      });
    });

    describe('With the back-to-tabs link', () => {
      it('sets the href to the active tab', () => {
        const backToTabLink = document.querySelector(Selector.BACK_TO_TABS);
        expect(backToTabLink.getAttribute('href')).toEqual(`#${tab1.el.id}`);
        tab2.show();
        expect(backToTabLink.getAttribute('href')).toEqual(`#${tab2.el.id}`);
      });
    });

    describe('With the scroll-to-top behavior', () => {
      it('returns to page top if previous panel was scrolled', () => {
        const panel2 = document.getElementById('tab2');
        jest.spyOn(panel2, 'getBoundingClientRect').mockImplementation(() => ({
          top: -500
        }));
        window.scrollTo = jest.fn();
        tab2.show();
        expect(window.scrollTo).toHaveBeenCalledWith(0, -500);
      });
    });
  });

  describe('remove()', () => {
    it('triggers the `onRemove` custom event', () => {
      tab1.el.dispatchEvent = jest.fn();
      tab1.remove();
      expect(tab1.el.dispatchEvent).toBeCalled();
      expect(tab1.el.dispatchEvent.mock.calls[0][0].type).toBe(EventName.ON_REMOVE);
    });

    it('removes the tab', () => {
      tab1.remove();
      expect(Tab.getInstances().length).toEqual(1);
    });
  });
});
