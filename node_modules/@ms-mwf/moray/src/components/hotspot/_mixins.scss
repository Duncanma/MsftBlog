@mixin define-ripple-animation($ripple-color: $light, $thickness: 1em) {
  @keyframes ripple {
    0% {
      border: 1px solid $ripple-color;
      opacity: 0;
      border-radius: 50%;
      top: -1px;
      left: -1px;
      box-sizing: content-box;
      box-shadow: none;
    }
    50% {
      opacity: 1;
    }
    100% {
      border: $thickness solid $ripple-color;
      opacity: 0;
      border-radius: 50%;
      top: -$thickness;
      left: -$thickness;
      box-sizing: content-box;
      box-shadow: none;
    }
  }
}

@mixin ripple-border($border-color: $light, $thickness: 1em) {

  @media screen and (prefers-reduced-motion: no-preference) {
    // Triggering animation once
    // The desired behavior is an ability to trigger the ripple animation
    // once, and then trigger it once on every hover. Adding the .ripple-once
    // class does trigger the animation once, but then blocks further ripple
    // animations, so it needs to be removed afterwards. The technique of
    // making a copy of the animation keyframes with a different name doesn't
    // quite cut it; it ends up triggering the animation both when hover
    // starts and when it ends.

    &.hotspot-hover-ripple:hover::after {
      animation: ripple 0.8s cubic-bezier(0.5, 0, 0.5, 1);
      animation-iteration-count: 1;
      content: "";
      display: block;
      position: absolute;
      border-radius: 50%;
      width: 100%;
      height: 100%;
    }

    &.ripple-once::after {
      animation: ripple 0.8s cubic-bezier(0.5, 0, 0.5, 1);
      animation-iteration-count: 1;
      content: "";
      display: block;
      position: absolute;
      border-radius: 50%;
      width: 100%;
      height: 100%;
    }
  }
}

@mixin hotspot-colors($background-color: $primary) {
  // color-yiq function gets black or white according to which has better color contrast
  $inner-border-color: color-yiq($background-color);
  $outer-border-color: color-yiq($inner-border-color);

  background-color: $background-color;
  color: $inner-border-color;
  border-color: $outer-border-color;

  &::before {
    border-color: $inner-border-color;
  }

  &:focus::after {
    border-color: $outer-border-color;
  }

  &.hotspot-active,
  &[aria-expanded="true"],
  &[aria-pressed="true"] {
    box-shadow: 0 0 0 1em rgba($inner-border-color, 0.6);
  }
}

@mixin hotspot-minimalist-colors($background-color: $light) {
  $contrast-color: color-yiq($background-color);

  background-color: $background-color;
  color: $contrast-color;
  border-color: $contrast-color;

  &::before {
    border-color: $background-color;
  }

  &:focus::after {
    border-color: $contrast-color;
  }

  &.hotspot-active,
  &[aria-expanded="true"],
  &[aria-pressed="true"] {
    box-shadow: 0 0 0 1em rgba($contrast-color, 0.6);
  }
}
