import Util from '../../js/util';

export const Selector = {
  DATA_MOUNT: '[data-mount="content-swap"]'
};

export const EventName = {
  ON_SWAP: 'onSwap',
  ON_HIDE: 'onHide',
  ON_SHOW: 'onShow',
  ON_UPDATE: 'onUpdate',
  ON_REMOVE: 'onRemove'
};

const contentSwapInstances = [];

function _getTargetList() {
  // Reads selector from data-target attribute
  const selector = Util.getSelectorFromElement(this.swapTrigger);
  return [].slice.call(document.querySelectorAll(selector));
}

class ContentSwap {
  constructor(opts) {
    this.swapTrigger = opts.el || opts.swapTrigger;

    if (opts.swapTrigger) {
      console.warn(
        'Warning: the ContentSwap "swapTrigger" option is deprecated and will be removed in favor of "el" in a future version'
      );
    }

    this.targetList = _getTargetList.bind(this)();

    // Add event handlers
    this.events = [{ el: this.swapTrigger, type: 'click', handler: this.swapContent.bind(this) }];

    Util.addEvents(this.events);

    // Create custom events.
    this[EventName.ON_SWAP] = new CustomEvent(EventName.ON_SWAP, { bubbles: true, cancelable: true });
    this[EventName.ON_HIDE] = new CustomEvent(EventName.ON_HIDE, { bubbles: true, cancelable: true });
    this[EventName.ON_SHOW] = new CustomEvent(EventName.ON_SHOW, { bubbles: true, cancelable: true });

    // push to instances list
    contentSwapInstances.push(this);
  }

  update() {
    this.targetList = _getTargetList.bind(this)();

    // Create and dispatch custom event
    this[EventName.ON_UPDATE] = new CustomEvent(EventName.ON_UPDATE, { bubbles: true });
    this.swapTrigger.dispatchEvent(this[EventName.ON_UPDATE]);
  }

  remove() {
    Util.removeEvents(this.events);

    const index = contentSwapInstances.indexOf(this);
    contentSwapInstances.splice(index, 1);

    // Create and dispatch custom event
    this[EventName.ON_REMOVE] = new CustomEvent(EventName.ON_REMOVE, { bubbles: true });
    this.swapTrigger.dispatchEvent(this[EventName.ON_REMOVE]);
  }

  hide(element) {
    element.setAttribute('hidden', '');
    element.dispatchEvent(this[EventName.ON_HIDE]);
  }

  show(element) {
    element.removeAttribute('hidden');
    element.dispatchEvent(this[EventName.ON_SHOW]);
  }

  swapContent() {
    this.swapTrigger.dispatchEvent(this[EventName.ON_SWAP]);
    this.targetList.forEach(element => {
      if (element.hasAttribute('hidden')) {
        // unhides the hidden
        this.show(element);
      } else {
        // hides the unhidden
        this.hide(element);
      }
    });
  }

  static getInstances() {
    return contentSwapInstances;
  }
}

export default ContentSwap;
