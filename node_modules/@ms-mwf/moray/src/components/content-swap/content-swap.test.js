import ContentSwap, { Selector, EventName } from './content-swap';

const contentSwapHtml = [
  '<button id="swapTrigger1" data-mount="content-swap" data-target=".swappable-1">Swap 1</button>',
  '<p class="swappable-1">Placeholder</p>',
  '<p class="swappable-1">Placeholder</p>',
  '<button id="swapTrigger2" data-mount="content-swap" data-target=".swappable-2">Swap 2</button>',
  '<p class="swappable-2" hidden>Placeholder</p>',
  '<p class="swappable-2" hidden>Placeholder</p>',
  '<p id="newAddition" class="not-swappable">Placeholder</p>'
].join('');

describe('ContentSwap without options passed in', () => {
  let instances;
  let cs0;
  let cs0t0;
  let cs0t1;
  let cs1;
  let cs1t0;
  let cs1t1;
  let detectedEventTrigger = '';
  let detectedEventContentShow = '';
  let detectedEventContentHide = '';

  // Set up DOM
  document.body.innerHTML = contentSwapHtml;

  beforeAll(() => {
    // init
    document.querySelectorAll(Selector.DATA_MOUNT).forEach(el => {
      new ContentSwap({ el });
    });

    instances = ContentSwap.getInstances();
  });

  it('should be initialized', () => {
    expect(instances.length).toEqual(2);

    cs0 = instances[0];
    cs1 = instances[1];

    cs0t0 = cs0.targetList[0];
    cs0t1 = cs0.targetList[1];
    cs1t0 = cs1.targetList[0];
    cs1t1 = cs1.targetList[1];

    expect(cs0.swapTrigger.id).toEqual('swapTrigger1');
    expect(cs0.targetList.length).toEqual(2);
    expect(cs0t0.attributes.hidden).toBeUndefined();
    expect(cs0t1.attributes.hidden).toBeUndefined();

    expect(cs1.swapTrigger.id).toEqual('swapTrigger2');
    expect(cs1.targetList.length).toEqual(2);
    expect(cs1t0.attributes.hidden).toBeTruthy();
    expect(cs1t1.attributes.hidden).toBeTruthy();

    // add custom event listeners (only on cs1, cs1t0, and cs0t0)
    cs1.swapTrigger.addEventListener('onSwap', () => {
      detectedEventTrigger = 'onSwap';
    });
    cs1.swapTrigger.addEventListener('onUpdate', () => {
      detectedEventTrigger = 'onUpdate';
    });
    cs1.swapTrigger.addEventListener('onRemove', () => {
      detectedEventTrigger = 'onRemove';
    });
    cs1t0.addEventListener('onShow', () => {
      detectedEventContentShow = 'onShow';
    });
    cs0t0.addEventListener('onHide', () => {
      detectedEventContentHide = 'onHide';
    });
  });

  describe('When the trigger element is clicked', () => {
    beforeAll(() => {
      // click the triggers
      cs0.swapTrigger.click();
      cs1.swapTrigger.click();
    });

    it('should hide non-hidden elements', () => {
      expect(cs0t0.attributes.hidden).toBeTruthy();
      expect(cs0t1.attributes.hidden).toBeTruthy();
    });

    it('should unhide hidden elements', () => {
      expect(cs1t0.attributes.hidden).toBeUndefined();
      expect(cs1t1.attributes.hidden).toBeUndefined();
    });

    it('should trigger appropriate custom events', () => {
      expect(detectedEventTrigger).toEqual('onSwap');
      expect(detectedEventContentHide).toEqual('onHide');
      expect(detectedEventContentShow).toEqual('onShow');
    });
  });

  describe('swapContent with preventDefault', () => {
    it('should cancel swap if default is prevented', () => {
      cs0.swapTrigger.dispatchEvent = jest.fn(e => e.preventDefault());
      cs0.swapContent();

      expect(cs0.swapTrigger.dispatchEvent).toBeCalled();
      expect(cs0.swapTrigger.dispatchEvent.mock.calls[0][0].type).toBe(EventName.ON_SWAP);
      expect(cs0.swapTrigger.dispatchEvent.mock.calls[0][0].defaultPrevented).toBe(true);
      expect(cs0t0.attributes.hidden).toBeTruthy();
    });
  });

  describe('when target content is changed and .update() is called', () => {
    beforeAll(() => {
      // try to update
      document.querySelector('#newAddition').classList = ['swappable-2'];
      cs1.update();
    });

    it('should have the correct number of elements', () => {
      expect(cs1.targetList.length).toEqual(3);
    });

    it('should trigger a custom event', () => {
      expect(detectedEventTrigger).toEqual('onUpdate');
    });
  });

  describe('when an instance is removed', () => {
    beforeAll(() => {
      // try to remove
      cs1.remove();
    });

    it('should return the correct number of instances', () => {
      expect(ContentSwap.getInstances().length).toEqual(1);
    });

    it('should trigger a custom event', () => {
      expect(detectedEventTrigger).toEqual('onRemove');
    });
  });
});
