import Positioner, { EventName } from './positioner';

Object.defineProperty(window, 'matchMedia', {
  writable: true,
  value: jest.fn().mockImplementation(query => ({
    matches: false,
    media: query,
    onchange: null,
    addListener: jest.fn(), // deprecated
    removeListener: jest.fn(), // deprecated
    addEventListener: jest.fn(),
    removeEventListener: jest.fn(),
    dispatchEvent: jest.fn()
  }))
});

const positionerNoOptionsHtml = '<button id="pos1" data-position="positioner">Text</button>';

const positionerDataOptionsHtml = [
  '<button',
  'id="pos2"',
  'data-position="positioner"',
  'data-position-top-default="15.2"',
  'data-position-left-default="15.2"',
  'data-position-top-sm="25.2"',
  'data-position-left-sm="25.2"',
  'data-position-top-lg="35.2"',
  'data-position-left-lg="35.2">',
  'Text',
  '</button>'
].join(' ');

const positionerDataOptionsAltHtml = [
  '<button',
  'id="pos3"',
  'data-position="positioner"',
  'data-position-top-default="15.2"',
  'data-position-left-default="15.2"',
  'data-position-top-sm="25.2"',
  'data-position-left-sm="25.2"',
  'data-position-top-lg="35.2"',
  'data-position-left-lg="35.2">',
  'Text',
  '</button>'
].join(' ');

document.body.innerHTML = positionerNoOptionsHtml + positionerDataOptionsHtml + positionerDataOptionsAltHtml;

describe('Positioner', () => {
  let pos1;
  let pos2;
  let pos3;

  const jestDefaultWidth = 1024;

  beforeAll(() => {
    window.innerWidth = 320;
  });

  afterAll(() => {
    window.innerWidth = jestDefaultWidth;
  });

  beforeEach(() => {
    pos1 = new Positioner({ el: document.getElementById('pos1') });
    pos2 = new Positioner({ el: document.getElementById('pos2') });
    pos3 = new Positioner({
      el: document.getElementById('pos3'),
      positionMap: {
        default: {
          top: 10.2,
          left: 10.2
        }
      }
    });
  });

  afterEach(() => {
    document.body.innerHTML = positionerNoOptionsHtml + positionerDataOptionsHtml + positionerDataOptionsAltHtml;
    pos1.remove();
    pos2.remove();
    pos3.remove();
  });

  describe('getInstances()', () => {
    it('should return the number of instances', () => {
      const instances = Positioner.getInstances();
      expect(instances.length).toEqual(3);
      expect(instances[0].el).toBeInstanceOf(Node);
      expect(instances[1].el).toBeInstanceOf(Node);
      expect(instances[2].el).toBeInstanceOf(Node);
    });
  });

  describe('initialization', () => {
    const instances = Positioner.getInstances();
    it('should not place a style if none is passed in', () => {
      expect(pos1.el.style.top).toBeFalsy();
    });
    it('should set appropriate styles on init', () => {
      expect(instances[1].positionMap.default.top).toEqual(15.2);
      expect(pos2.el.style.top).toEqual('15.2%');
    });
    it('should give precedence to styles passed in JS', () => {
      expect(instances[2].positionMap.default.top).toEqual(10.2);
      expect(pos3.el.style.top).toEqual('10.2%');
    });
  });

  describe('Positioner.setPosition()', () => {
    it('Should default to zero with no arguments beside the node', () => {
      Positioner.setPosition(pos1.el);
      expect(pos1.el.style.top).toEqual('0px'); // despite assigning '0', default unit is px
      expect(pos1.el.style.left).toEqual('0px');
    });
    it('Should set styles appropriately', () => {
      Positioner.setPosition(pos2.el, 3, 4, 'em');
      expect(pos2.el.style.left).toEqual('3em');
      expect(pos2.el.style.top).toEqual('4em');
    });
  });

  describe('Positioner.clearInlinePosition()', () => {
    it('Should clear inline position styles', () => {
      Positioner.clearInlinePosition(pos1.el);
      expect(pos1.el.style.top).toEqual('');
      expect(pos1.el.style.top).toEqual('');
    });
  });

  describe('update()', () => {
    const positionMapUpdate = {
      positionMap: {
        default: {
          top: 10.2,
          left: 10.2
        }
      }
    };

    it('triggers the `onUpdate` custom event', () => {
      pos1.el.dispatchEvent = jest.fn();
      pos1.update();
      expect(pos1.el.dispatchEvent).toBeCalled();
      expect(pos1.el.dispatchEvent.mock.calls[0][0].type).toBe(EventName.ON_UPDATE);
    });

    it('updates the position', () => {
      pos1.update(positionMapUpdate);
      pos2.update(positionMapUpdate);

      expect(pos1.positionMap.default.top).toEqual(10.2);
      expect(pos1.el.style.top).toEqual('10.2%');

      expect(pos2.el.style.top).toEqual('10.2%');
    });

    it('should merge with exisiting positionMap', () => {
      pos2.update(positionMapUpdate);

      expect(pos2.positionMap.lg.top).toEqual(35.2);
    });
  });

  describe('remove()', () => {
    it('triggers the `onRemove` custom event', () => {
      pos1.el.dispatchEvent = jest.fn();
      pos1.remove();
      expect(pos1.el.dispatchEvent).toBeCalled();
      expect(pos1.el.dispatchEvent.mock.calls[0][0].type).toBe(EventName.ON_REMOVE);
    });

    it('removes the Positioner instance', () => {
      pos1.remove();
      expect(Positioner.getInstances().length).toEqual(2);
    });
  });
});
