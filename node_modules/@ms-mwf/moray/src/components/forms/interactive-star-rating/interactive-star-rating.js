import Util from '../../../js/util';

const formStars = [];

export const Selector = {
  DATA_MOUNT: '[data-mount="form-star"]',
  INPUTS: '.form-star-input',
  LABEL: 'data-checked-label',
  TEXT: '.form-star-text'
};

export const ClassName = {
  EMPTY: 'form-star-empty'
};

export const EventName = {
  ON_REMOVE: 'onRemove'
};

/**
 * Remove empty class
 */
function _removeEmptyStyles() {
  this.el.classList.remove(ClassName.EMPTY);
}

/**
 * Mouse leave event
 */
function _onMouseLeave() {
  if (!this.getCheckedInputs().length) {
    this.el.classList.add(ClassName.EMPTY);
  }
}

/**
 * Change event
 */
function _onChange(e) {
  this.checkedLabel.textContent = e.target.labels[0].querySelector(Selector.TEXT).textContent;
  _removeEmptyStyles.bind(this)();
}

/**
 * Check for disabled form elements
 * @returns {boolean} true if fieldset or all radios are disabled
 */
function _isDisabled() {
  const disabled = [].slice.call(this.inputs).filter(input => input.disabled === true);
  return disabled.length === this.inputs.length || this.el.closest('fieldset').disabled;
}

/**
 * HTMLInputElement.labels for unsupported browsers
 */
function _setLabels() {
  if (!this.inputs[0].labels) {
    const labels = this.el.querySelectorAll('label');
    [].slice.call(labels).forEach(label => {
      if (label.htmlFor) {
        const input = document.getElementById(label.htmlFor);
        if (input) {
          input.labels = [label];
        }
      }
    });
  }
}

/**
 * Class representing form star.
 */
class FormStar {
  /**
   * Initialize form star.
   * @param {Object} opts - The form star options.
   * @param {Node} opts.el - The form star wrapping element.
   * @param {Node} opts.checkedLabel - The visible container for the checked input label text.
   */
  constructor(opts) {
    this.el = opts.el;
    this.inputs = this.el.querySelectorAll(Selector.INPUTS);
    this.checkedLabel = opts.checkedLabel || document.getElementById(this.el.getAttribute(Selector.LABEL));
    this.isDisabled = _isDisabled.bind(this)();
    this.events = [
      {
        el: this.el,
        type: 'mouseenter',
        handler: _removeEmptyStyles.bind(this)
      },
      {
        el: this.el,
        type: 'mouseleave',
        handler: _onMouseLeave.bind(this)
      },
      {
        el: this.el,
        type: 'change',
        handler: e => {
          _onChange.bind(this)(e);
        }
      }
    ];

    if (this.isDisabled) {
      this.events = [];
    }

    formStars.push(this);

    _setLabels.bind(this)();

    const checked = this.getCheckedInputs();
    if (checked.length) {
      this.checkedLabel.textContent = checked[0].labels[0].querySelector(Selector.TEXT).textContent;
    } else {
      this.el.classList.add(ClassName.EMPTY);
    }

    // Add event handlers.
    Util.addEvents(this.events);
  }

  /**
   * Filters for checked inputs
   * @returns {array} checked inputs
   */
  getCheckedInputs() {
    return [].slice.call(this.inputs).filter(input => input.checked === true);
  }

  /**
   * Remove the form star.
   */
  remove() {
    // Remove event handlers.
    Util.removeEvents(this.events);

    // Remove this form star reference from array of instances
    const index = formStars.indexOf(this);
    formStars.splice(index, 1);

    // Create and dispatch custom event
    this[EventName.ON_REMOVE] = new CustomEvent(EventName.ON_REMOVE, { bubbles: true });
    this.el.dispatchEvent(this[EventName.ON_REMOVE]);
  }

  /**
   * Get an array of form star instances.
   * @returns {Object[]} Array of form star instances.
   */
  static getInstances() {
    return formStars;
  }
}

export default FormStar;
