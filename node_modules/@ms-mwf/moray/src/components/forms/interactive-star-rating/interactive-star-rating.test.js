import FormStar, { Selector, ClassName, EventName } from './interactive-star-rating';

const formStarHTML = `
<fieldset class="form-group ">
  <legend class="">Choose a star rating</legend>
  <div class="form-star" data-mount="form-star" data-checked-label="mwf213c8dba-label">
    <input type="radio" class="form-star-input" id="mwf213c8dba-1" name="starRating" value="1">
    <label class="form-star-label" for="mwf213c8dba-1">
      <span class="form-star-text">1 star</span>
      <span class="form-star-glyph" aria-hidden="true"></span>
    </label>
    <input type="radio" class="form-star-input" id="mwf213c8dba-2" name="starRating" value="2">
    <label class="form-star-label" for="mwf213c8dba-2">
      <span class="form-star-text">2 stars</span>
      <span class="form-star-glyph" aria-hidden="true"></span>
    </label>
    <input type="radio" class="form-star-input" id="mwf213c8dba-3" name="starRating" value="3">
    <label class="form-star-label" for="mwf213c8dba-3">
      <span class="form-star-text">3 stars</span>
      <span class="form-star-glyph" aria-hidden="true"></span>
    </label>
    <input type="radio" class="form-star-input" id="mwf213c8dba-4" name="starRating" value="4">
    <label class="form-star-label" for="mwf213c8dba-4">
      <span class="form-star-text">4 stars</span>
      <span class="form-star-glyph" aria-hidden="true"></span>
    </label>
    <input type="radio" class="form-star-input" id="mwf213c8dba-5" name="starRating" value="5">
    <label class="form-star-label" for="mwf213c8dba-5">
      <span class="form-star-text">5 stars</span>
      <span class="form-star-glyph" aria-hidden="true"></span>
    </label>
    <span aria-hidden="true" class="form-star-checked-label" id="mwf213c8dba-label"></span>
  </div>
</fieldset>
`;

document.body.innerHTML = formStarHTML;

const el = document.querySelector(Selector.DATA_MOUNT);
const checkedLabel = document.querySelector(`#${el.getAttribute(Selector.LABEL)}`);
const stars = el.querySelectorAll(Selector.INPUTS);
const firstStar = stars[0];
const firstStarLabel = firstStar.labels[0].querySelector(Selector.TEXT);

const changeEvent = new Event('change', { bubbles: true });

describe('Form star', () => {
  let formStar;

  afterEach(() => {
    if (formStar) {
      formStar.remove();
    }

    el.classList.remove(ClassName.EMPTY);
  });

  describe('No checked stars at init', () => {
    beforeEach(() => {
      firstStar.checked = false;
      formStar = new FormStar({ el });
    });

    describe('constructor()', () => {
      it('should initialize with the empty class if no stars are checked', () => {
        expect(el.classList).toContain(ClassName.EMPTY);
      });

      it('should remove empty class when the mouse enters the form star group', () => {
        el.dispatchEvent(new MouseEvent('mouseenter'));
        expect(el.classList).not.toContain(ClassName.EMPTY);
      });

      it('should add empty class when the mouse leaves the form star group', () => {
        el.dispatchEvent(new MouseEvent('mouseleave'));
        expect(el.classList).toContain(ClassName.EMPTY);
      });

      it('should update the label and remove the empty class on change', () => {
        firstStar.checked = true;
        firstStar.dispatchEvent(changeEvent);
        expect(checkedLabel.textContent).toEqual(firstStarLabel.textContent);
        expect(el.classList).not.toContain(ClassName.EMPTY);
      });
    });

    describe('getCheckedInputs()', () => {
      it('should return an array of checked inputs', () => {
        expect(formStar.getCheckedInputs()).toHaveLength(0);
      });
    });

    describe('remove()', () => {
      beforeEach(() => {
        formStar.el.dispatchEvent = jest.fn();
        formStar.remove();
      });

      it('should remove form star from the list of instances', () => {
        const instances = FormStar.getInstances();
        expect(instances.indexOf(formStar)).toEqual(-1);
      });

      it('should trigger the `onRemove` custom event', () => {
        expect(formStar.el.dispatchEvent).toBeCalled();
        expect(formStar.el.dispatchEvent.mock.calls[0][0].type).toEqual(EventName.ON_REMOVE);
      });
    });

    describe('getInstances()', () => {
      it('should return an array of all form star instances', () => {
        expect(FormStar.getInstances()).toHaveLength(1);
      });
    });
  });

  describe('First star checked at init', () => {
    beforeEach(() => {
      firstStar.checked = true;
      formStar = new FormStar({ el });
    });

    describe('constructor()', () => {
      it('should initialize with a label and without the empty class', () => {
        expect(el.classList).not.toContain(ClassName.EMPTY);
        expect(checkedLabel.textContent).toEqual(firstStarLabel.textContent);
      });
    });
  });

  describe('Disabled stars', () => {
    beforeAll(() => {
      [].slice.call(stars).forEach(star => {
        star.disabled = true;
      });
    });

    beforeEach(() => {
      formStar = new FormStar({ el });
    });

    afterAll(() => {
      [].slice.call(stars).forEach(star => {
        star.disabled = false;
      });
    });

    it('should not add event handlers', () => {
      expect(formStar.events).toHaveLength(0);
    });
  });
});
