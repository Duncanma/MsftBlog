@import "../../../styles/functions";
@import "../../../variables";
@import "../../../styles/mixins";
@import "../mixins";

// stylelint-disable selector-no-qualifying-type

.form-control {
  display: block;
  width: 100%;
  height: $input-height;
  padding: $input-padding-y $input-padding-x;
  font-size: $font-size-base;
  line-height: $input-line-height;
  color: $input-color;
  background-color: $input-bg;
  background-clip: padding-box;
  border: $input-border-width solid $input-border-color;
  border-radius: $input-border-radius;
  @include transition($input-transition);

  @include theme-inverse {
    color: $input-color-inverse;
    background-color: $input-bg-inverse;
    border: $input-border-width solid $input-border-color-inverse;
  }

  // Unstyle the caret on `<select>`s in IE10+.
  &::-ms-expand {
    background-color: transparent;
    border: 0;
  }

  // Customize the `:focus` state to imitate native WebKit styles.
  @include form-control-focus;

  // Placeholder
  &::placeholder {
    color: inherit;
    // Override Firefox's unusual default opacity; see https://github.com/twbs/bootstrap/pull/11526.
    opacity: 0.5;

    @include theme-inverse {
      color: $input-color-inverse;
    }
  }

  // Disabled and read-only inputs
  //
  // HTML5 says that controls under a fieldset > legend:first-child won't be
  // disabled if the fieldset is disabled. Due to implementation difficulty, we
  // don't honor that edge case; we style them as disabled anyway.
  &[readonly] {
    // iOS fix for unreadable disabled content; see https://github.com/twbs/bootstrap/issues/11655.
    opacity: 1;
    border-color: $input-readonly-border-color;
    background-color: $input-readonly-bg;

    @include theme-inverse {
      border-color: $input-readonly-border-color-inverse;
      background-color: $input-readonly-bg-inverse;
    }
  }

  &:disabled {
    background-color: $input-disabled-bg;
    border-color: $input-disabled-border-color;
    opacity: $input-btn-disabled-opacity;

    @include theme-inverse {
      background-color: $input-disabled-bg-inverse;
      border-color: $input-disabled-border-color-inverse;
    }
  }
}

// Readonly controls as plain text
//
// Apply class to a readonly input to make it appear like regular plain
// text (without any border, background color, focus indicator)

.form-control-plaintext[readonly] {
  display: block;
  width: 100%;
  font-size: $font-size-base;
  padding-top: #{$font-size-base * $input-line-height - $font-size-base + $input-border-width};
  padding-bottom: #{$font-size-base * $input-line-height - $font-size-base + $input-border-width};
  line-height: $input-line-height;
  color: inherit;
  background-color: transparent;
  border: 0;

  &.form-control-sm {
    padding-top: #{$font-size-sm * $input-line-height-sm - $font-size-sm + $input-border-width};
    padding-bottom: #{$font-size-sm * $input-line-height-sm - $font-size-sm + $input-border-width};
  }

  &.form-control-lg {
    padding-top: #{$font-size-lg * $input-line-height-lg - $font-size-lg + $input-border-width};
    padding-bottom: #{$font-size-lg * $input-line-height-lg - $font-size-lg + $input-border-width};
  }

  @include theme-inverse {
    background-color: transparent;
  }
}

// Form control sizing
//
// Build on `.form-control` with modifier classes to decrease or increase the
// height and font-size of form controls.
//
// Repeated in `_input_group.scss` to avoid Sass extend issues.

.form-control-sm {
  height: $input-height-sm;
  padding: $input-padding-y-sm $input-padding-x-sm;
  font-size: $font-size-sm;
}

.form-control-lg {
  height: $input-height-lg;
  padding: $input-padding-y-lg $input-padding-x-lg;
  font-size: $font-size-lg;
}

textarea.form-control {
  height: auto;
}

select.form-control {
  // Padding is ignored or applied inconsistently between browsers
  // and can break select element. Calculated height and text-indent
  // is used instead to maintain size and padding.
  padding: 0;
  text-indent: $input-padding-x / 3;

  &[size],
  &[multiple] {
    height: auto;
    text-indent: 0;

    option {
      padding: $input-padding-y $input-padding-x;
    }

    &.form-control-sm option {
      padding: $input-padding-y-sm $input-padding-x-sm;
    }

    &.form-control-lg option {
      padding: $input-padding-y-sm $input-padding-x-sm;
    }
  }

  &:focus::-ms-value {
    // Suppress the nested default white text on blue background highlight given to
    // the selected option text when the (still closed) <select> receives focus
    // in IE and (under certain conditions) Edge, as it looks bad and cannot be made to
    // match the appearance of the native widget.
    // See https://github.com/twbs/bootstrap/issues/19398.
    color: $input-color;
    background-color: $input-bg;

    @include theme-inverse {
      color: $input-color-inverse;
      background-color: $input-bg-inverse;
    }
  }
}

// Make file inputs better match text inputs by forcing them to new lines.
.form-control-file,
.form-control-range {
  display: block;
  width: 100%;
}
