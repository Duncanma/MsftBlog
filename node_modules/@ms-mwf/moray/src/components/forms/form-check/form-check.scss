@import "../../../styles/functions";
@import "../../../variables";
@import "../../../styles/mixins";
@import "../mixins";

.form-check {
  position: relative;
  display: flex;

  @include ltr {
    padding-left: $form-check-input-gutter;
  }
  @include rtl {
    padding-right: $form-check-input-gutter;
  }
}

.form-check-label {
  font-size: $font-size-base;
  margin-bottom: 0; // Override default `<label>` bottom margin
}

.form-check-input {
  position: relative;
  top: $form-check-input-spacer-y;
  appearance: none;
  // stylelint-disable-next-line property-no-vendor-prefix
  -webkit-appearance: none; // needed for iOS Safari
  width: $form-check-input-size;
  height: $form-check-input-size;
  border: $input-border-width solid $input-border-color;
  background-color: $input-bg;
  color: inherit;

  @include ltr {
    margin-left: -$form-check-input-gutter;
  }
  @include rtl {
    margin-right: -$form-check-input-gutter;
  }

  @include theme-inverse {
    border: $input-border-width solid $input-border-color-inverse;
    background-color: $input-bg-inverse;
  }

  &:disabled {
    border-color: $input-disabled-border-color;
    background-color: $input-disabled-bg;
    opacity: $input-btn-disabled-opacity;

    @include theme-inverse {
      border-color: $input-disabled-border-color-inverse;
      background-color: $input-disabled-bg-inverse;
    }
  }

  &:disabled ~ .form-check-label {
    opacity: $input-btn-disabled-opacity;
  }

  &:focus {
    @include form-check-input-focus;
  }

  &.position-static::before {
    top: $input-border-width;
    left: 0;
  }

  // Used for custom indicator.
  &::after {
    pointer-events: none;
    display: none;
    position: absolute;
    font-family: $font-family-glyph;
    line-height: 1;
  }

  + .form-check-label {
    @include ltr {
      margin-left: $form-check-inline-input-margin-x;
    }
    @include rtl {
      margin-right: $form-check-inline-input-margin-x;
    }
  }
}

.form-check-input[type="checkbox"] {
  border-radius: $form-check-input-border-radius;

  &::after {
    content: map-get($glyphs, "accept");
    top: 0;
    left: 0;
    font-size: $form-check-input-glyph-width;
    height: $form-check-input-glyph-width;
    width: $form-check-input-glyph-width;
  }

  // Reposition check indicator when input is positioned statically.
  &.position-static::after {
    top: $form-check-input-spacer-y + ($form-check-input-size - $form-check-input-glyph-width) / 2;
    left: ($form-check-input-size - $form-check-input-glyph-width) / 2;
  }

  &:checked {
    border-color: transparent;
    background-color: $component-active-bg;

    @include theme-inverse {
      background-color: $component-active-bg-inverse;
    }

    &::after {
      display: block;
      color: color-yiq($component-active-bg);

      @include theme-inverse {
        color: color-yiq($component-active-bg-inverse);
      }
    }
  }

  &:indeterminate {
    border-color: transparent;
  }

  &:indeterminate,
  &:disabled:checked,
  &:disabled:indeterminate {
    background-color: $component-active-bg;

    @include theme-inverse {
      background-color: $component-active-bg-inverse;
    }
  }
}

.form-check-input[type="radio"] {
  border-radius: 50%;

  &::after {
    content: "";
    top: 50%;
    left: 50%;
    margin-top: -($form-check-input-radio-glyph-width / 2);
    margin-left: -($form-check-input-radio-glyph-width / 2);
    border-radius: 50%;
    border: ($form-check-input-radio-glyph-width / 2) solid $component-active-bg;

    @include theme-inverse {
      border: ($form-check-input-radio-glyph-width / 2) solid $component-active-bg-inverse;
    }
  }

  // Reposition check indicator when input is positioned statically.
  &.position-static::after {
    top: $form-check-input-spacer-y + ($form-check-input-size - $form-check-input-radio-glyph-width) / 2;
    left: ($form-check-input-size - $form-check-input-radio-glyph-width) / 2;
  }

  &:checked {
    border-color: $component-active-bg;

    @include theme-inverse {
      border-color: $component-active-bg-inverse;
    }

    &::after {
      display: block;
      color: $component-active-bg;

      @include theme-inverse {
        color: $component-active-bg-inverse;
      }
    }
  }
}

.form-check-inline {
  display: inline-flex;
  align-items: center;

  @include ltr {
    padding-left: 0; // Override base .form-check
    margin-right: $form-check-inline-margin-x;
  }
  @include rtl {
    padding-right: 0; // Override base .form-check
    margin-left: $form-check-inline-margin-x;
  }

  // Undo .form-check-input defaults and add some `margin-right`.
  .form-check-input {
    margin-top: 0;
    top: auto;

    @include ltr {
      margin-left: 0;
    }
    @include rtl {
      margin-right: 0;
    }
  }
}

// Add space between `form-check`s in a `form-group`
.form-group {
  .form-check ~ .form-check:not(.form-check-inline) {
    margin-top: map-get($spacers, g);
  }
  .form-check-inline {
    margin-bottom: map-get($spacers, g);
  }
}
