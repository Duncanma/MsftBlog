@import "../../styles/functions";
@import "../../variables";
@import "../../styles/mixins";

.popover-wrapper {
  position: relative;
}

.popover {
  position: absolute;
  top: 0;
  z-index: $zindex-popover;
  max-width: $popover-max-width;
  // Our parent element can be arbitrary since popovers are by default inserted as a sibling of their target element.
  // So reset our font and text properties to avoid inheriting weird values.
  // @include reset-text;
  font-size: $popover-font-size;
  // Allow breaking very long words so they don't overflow the popover's bounds
  word-wrap: break-word;
  background-color: $popover-bg;
  background-clip: padding-box;
  border: $popover-border-width solid $popover-border-color;
  box-shadow: $popover-box-shadow;
  display: none;

  @include theme-inverse {
    background-color: $popover-bg-inverse;
    border-color: $popover-border-color-inverse;
  }

  @keyframes fade-in {
    from { opacity: 0; }
    to { opacity: 1; }
  }

  @keyframes fade-out {
    from { opacity: 1; }
    to { opacity: 0; }
  }

  &.show {
    display: block;

    &.fade {
      animation: $popover-animation-duration $popover-animation-timing-fn fade-in;
    }
  }

  &.fading-out {
    display: block;
    animation: $popover-animation-duration $popover-animation-timing-fn fade-out;
  }

  .arrow {
    position: absolute;
    display: block;
    width: $popover-arrow-size;
    height: $popover-arrow-size;
    background-color: $popover-border-color;
    // Since there isn't any real content in the arrow
    // let's normalize the rotation axis with LTR
    direction: ltr;
    transform-origin: center;

    &::after {
      display: block;
      content: "";
      width: 100%;
      height: 100%;
      margin: $popover-border-width;
      background-color: $popover-bg;
    }

    @include theme-inverse {
      background-color: $popover-border-color-inverse;

      &::after {
        background-color: $popover-bg-inverse;
      }
    }
  }

  .close {
    position: absolute;
    font-size: $glyph-size-small;
    padding: 0.625rem;
    outline-offset: $vfi-outline-inset;
    z-index: 1;

    @include ltr {
      right: 0;
    }
    @include rtl {
      left: 0;
    }
  }

  $arrow-offset: -($popover-arrow-size / 2 + $popover-border-width);

  &.flyout-top {
    .arrow {
      bottom: $arrow-offset;
      transform: rotate(-135deg);
    }
  }

  &.flyout-bottom {
    .arrow {
      top: $arrow-offset;
      transform: rotate(45deg);
    }
  }

  &.flyout-right {
    .arrow {
      left: $arrow-offset;
      transform: rotate(-45deg);
    }
  }

  &.flyout-left {
    .arrow {
      right: $arrow-offset;
      transform: rotate(135deg);
    }
  }
}

.popover-content {
  overflow: auto;
}

// Offset the popover to account for the popover arrow
.popover-header {
  padding: $popover-header-padding-y $popover-header-padding-x 0 $popover-header-padding-x;
  font-weight: $popover-header-weight;
  font-size: $popover-header-size;
  margin-bottom: 0; // Reset the default from Reboot

  &:empty {
    display: none;
  }

  // Reduce space between header and body when header is not empty
  &:not(:empty) + .popover-body {
    padding-top: 0.125rem;
  }
}

.popover-body {
  padding: $popover-body-padding-y $popover-body-padding-x;

  :last-child {
    margin-bottom: 0;
  }
}
