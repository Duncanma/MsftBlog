import BackToTop, { Selector, EventName } from './back-to-top';
import 'intersection-observer';

const topId = 'page-top';
const html = `
  <div class="back-to-top p-g d-flex justify-content-end" data-mount="back-to-top">
    <a href="#${topId}" class="btn btn-gray-200 text-center">
      <span class="glyph-prepend glyph-prepend-up d-inline-flex"><span class="px-1"></span>Back to top</span>
    </a>
  </div>
`;

describe(BackToTop.name, () => {
  describe('with no options passed in', () => {
    const onScroll = jest.fn();
    let instances;
    let eventValue = '';

    beforeAll(() => {
      document.body.innerHTML = `
        <div id=${topId}>/<div>
        ${html}
      `;

      new BackToTop({ el: document.querySelector(Selector.DATA_MOUNT) });
      instances = BackToTop.getInstances();

      instances[0].el.addEventListener(EventName.ON_REMOVE, () => {
        eventValue = 'removed';
      });

      instances[0].el.addEventListener(EventName.ON_UPDATE, () => {
        eventValue = 'updated';
      });
    });

    it('should be able to be initialized', () => {
      expect(instances.length).toEqual(1);
      expect(instances[0].el).not.toBe(null);
    });

    it('should have a sticky class instance', () => {
      expect(instances.length).toEqual(1);
      expect(instances[0].stickyElement).not.toBe(null);
    });

    it('should set the destination element tabindex to -1', () => {
      expect(document.getElementById(topId).getAttribute('tabindex')).toEqual('-1');
    });

    it('should be able to be updated with options passed in', () => {
      instances[0].update({
        offsetMarginTop: 2000,
        onScroll
      });
      expect(eventValue).toEqual('updated');
      expect(onScroll).toHaveBeenCalledTimes(1);
      expect(instances[0].offsetMarginTop).toEqual(2000);
    });

    it('should be able to be removed', () => {
      instances[0].remove();
      expect(instances.length).toEqual(0);
    });

    it('should trigger a custom event when removed', () => {
      expect(eventValue).toEqual('removed');
    });
  });

  describe('with an existing tabindex', () => {
    beforeAll(() => {
      document.body.innerHTML = `
        <div id=${topId} tabindex="2">/<div>
        ${html}
      `;

      new BackToTop({ el: document.querySelector(Selector.DATA_MOUNT) });
    });

    it('should keep the element tabindex at 2', () => {
      expect(document.getElementById(topId).getAttribute('tabindex')).toEqual('2');
    });
  });

  describe('linking to an existing focusable element', () => {
    beforeAll(() => {
      document.body.innerHTML = `
        <button id=${topId}>Test Button</button>
        ${html}
      `;

      new BackToTop({ el: document.querySelector(Selector.DATA_MOUNT) });
    });

    it('should not set the tabindex of the button', () => {
      expect(document.getElementById(topId).getAttribute('tabindex')).toBe(null);
    });
  });
});
