/* eslint-disable max-nested-callbacks */
import MultiFeature, { Selector, EventName, ClassName } from './multi-feature';
import Collapse, { Selector as CollapseSelector, EventName as CollapseEventName } from '../collapse/collapse';

const defaultHtml = `
<div data-mount="multi-feature" class="multi-feature">
  <ul class="accordion accordion-backplate" id=multiFeatureAccordion>
    <li>
      <h4>
        <button class="btn btn-collapse" data-mount="collapse" data-target="#mwfb48c1482" aria-expanded="false" aria-controls="mwfb48c1482">16px semibold text based topics</button>
      </h4>
      <div class="collapse" id="mwfb48c1482">
        <div class="accordion-body">
          <p>16px regular paragraph description copy</p>
          <div class="multi-feature-feature">
            <picture>
              <source srcset="https://morayassets.z21.web.core.windows.net/images/multi-feature/multi_feature_image_topic_1_vp5.png" media="(min-width: 1400px)">
              <source srcset="https://morayassets.z21.web.core.windows.net/images/multi-feature/multi_feature_image_topic_1_vp4.png" media="(min-width: 1084px)">
              <source srcset="https://morayassets.z21.web.core.windows.net/images/multi-feature/multi_feature_image_topic_1_vp3.png" media="(min-width: 860px)">
              <source srcset="https://morayassets.z21.web.core.windows.net/images/multi-feature/multi_feature_image_topic_1_vp2.png" media="(min-width: 540px)">
              <img src="https://morayassets.z21.web.core.windows.net/images/multi-feature/multi_feature_image_topic_1_vp1.png" class="img-fluid" alt="placeholder text for image">
            </picture>
          </div>
        </div>
      </div>
    </li>
    <li>
      <h4>
        <button class="btn btn-collapse" data-mount="collapse" data-target="#mwf6c22176d" aria-expanded="false" aria-controls="mwf6c22176d">Number of topics recommendation</button>
      </h4>
      <div class="collapse" id="mwf6c22176d">
        <div class="accordion-body">
          <p>Minimum of 3 and maximum of 6 topics recommended</p>
          <div class="multi-feature-feature">
            <picture>
              <source srcset="https://morayassets.z21.web.core.windows.net/images/multi-feature/multi_feature_image_topic_2_vp5.png" media="(min-width: 1400px)">
              <source srcset="https://morayassets.z21.web.core.windows.net/images/multi-feature/multi_feature_image_topic_2_vp4.png" media="(min-width: 1084px)">
              <source srcset="https://morayassets.z21.web.core.windows.net/images/multi-feature/multi_feature_image_topic_2_vp3.png" media="(min-width: 860px)">
              <source srcset="https://morayassets.z21.web.core.windows.net/images/multi-feature/multi_feature_image_topic_2_vp2.png" media="(min-width: 540px)">
              <img src="https://morayassets.z21.web.core.windows.net/images/multi-feature/multi_feature_image_topic_2_vp1.png" class="img-fluid" alt="placeholder text for image">
            </picture>
          </div>
        </div>
      </div>
    </li>
    <li>
      <h4>
        <button class="btn btn-collapse" data-mount="collapse" data-target="#mwfa5376020" aria-expanded="false" aria-controls="mwfa5376020">Topics character limit</button>
      </h4>
      <div class="collapse" id="mwfa5376020">
        <div class="accordion-body">
          <p>Between 15 and 60 characters including spaces recommended</p>
          <div class="multi-feature-feature">
            <picture>
              <source srcset="https://morayassets.z21.web.core.windows.net/images/multi-feature/multi_feature_image_topic_3_vp5.png" media="(min-width: 1400px)">
              <source srcset="https://morayassets.z21.web.core.windows.net/images/multi-feature/multi_feature_image_topic_3_vp4.png" media="(min-width: 1084px)">
              <source srcset="https://morayassets.z21.web.core.windows.net/images/multi-feature/multi_feature_image_topic_3_vp3.png" media="(min-width: 860px)">
              <source srcset="https://morayassets.z21.web.core.windows.net/images/multi-feature/multi_feature_image_topic_3_vp2.png" media="(min-width: 540px)">
              <img src="https://morayassets.z21.web.core.windows.net/images/multi-feature/multi_feature_image_topic_3_vp1.png" class="img-fluid" alt="placeholder text for image">
            </picture>
          </div>
        </div>
      </div>
    </li>
    <li>
      <h4>
        <button class="btn btn-collapse" data-mount="collapse" data-target="#mwf186a9ce2" aria-expanded="false" aria-controls="mwf186a9ce2">Description character limit</button>
      </h4>
      <div class="collapse" id="mwf186a9ce2">
        <div class="accordion-body">
          <p>Up to 80 characters including spaces recommended</p>
          <div class="multi-feature-feature">
            <picture>
              <source srcset="https://morayassets.z21.web.core.windows.net/images/multi-feature/multi_feature_image_topic_4_vp5.png" media="(min-width: 1400px)">
              <source srcset="https://morayassets.z21.web.core.windows.net/images/multi-feature/multi_feature_image_topic_4_vp4.png" media="(min-width: 1084px)">
              <source srcset="https://morayassets.z21.web.core.windows.net/images/multi-feature/multi_feature_image_topic_4_vp3.png" media="(min-width: 860px)">
              <source srcset="https://morayassets.z21.web.core.windows.net/images/multi-feature/multi_feature_image_topic_4_vp2.png" media="(min-width: 540px)">
              <img src="https://morayassets.z21.web.core.windows.net/images/multi-feature/multi_feature_image_topic_4_vp1.png" class="img-fluid" alt="placeholder text for image">
            </picture>
          </div>
        </div>
      </div>
    </li>
    <li>
      <h4>
        <button class="btn btn-collapse" data-mount="collapse" data-target="#mwf21dec8ec" aria-expanded="false" aria-controls="mwf21dec8ec">Image or video sizing</button>
      </h4>
      <div class="collapse" id="mwf21dec8ec">
        <div class="accordion-body">
          <p>Aspect ratios of 4:3 recommended for images, and 16:9 for videos. Media responsively downscale without cropping.</p>
          <div class="multi-feature-feature">
            <div class="embed-responsive embed-responsive-16by9">
                <iframe class="embed-responsive-item" src="https://www.microsoft.com/en-us/videoplayer/embed/14b8051b-0100-4185-882c-185a674992a3?autoplay=false" allowfullscreen title="Placeholder for explicit title"></iframe>
            </div>
          </div>
        </div>
      </div>
    </li>
  </ul>
</div>
`;

const customHtml = `
  <div class="custom-multi-feature">
  <ul class="custom-accordion" id=customMultiFeatureAccordion>
    <li>
      <h4>
        <button class="btn btn-collapse" data-mount="collapse" data-target="#custom-mwfb48c1482" aria-expanded="false" aria-controls="custom-mwfb48c1482">16px semibold text based topics</button>
      </h4>
      <div class="collapse" id="custom-mwfb48c1482">
        <div class="accordion-body">
          <p>16px regular paragraph description copy</p>
          <div class="multi-feature-feature">
            <picture>
              <source srcset="https://morayassets.z21.web.core.windows.net/images/multi-feature/multi_feature_image_topic_1_vp5.png" media="(min-width: 1400px)">
              <source srcset="https://morayassets.z21.web.core.windows.net/images/multi-feature/multi_feature_image_topic_1_vp4.png" media="(min-width: 1084px)">
              <source srcset="https://morayassets.z21.web.core.windows.net/images/multi-feature/multi_feature_image_topic_1_vp3.png" media="(min-width: 860px)">
              <source srcset="https://morayassets.z21.web.core.windows.net/images/multi-feature/multi_feature_image_topic_1_vp2.png" media="(min-width: 540px)">
              <img src="https://morayassets.z21.web.core.windows.net/images/multi-feature/multi_feature_image_topic_1_vp1.png" class="img-fluid" alt="placeholder text for image">
            </picture>
          </div>
        </div>
      </div>
    </li>
    <li>
      <h4>
        <button class="btn btn-collapse" data-mount="collapse" data-target="#custom-mwf6c22176d" aria-expanded="false" aria-controls="custom-mwf6c22176d">Number of topics recommendation</button>
      </h4>
      <div class="collapse" id="custom-mwf6c22176d">
        <div class="accordion-body">
          <p>Minimum of 3 and maximum of 6 topics recommended</p>
          <div class="multi-feature-feature">
            <picture>
              <source srcset="https://morayassets.z21.web.core.windows.net/images/multi-feature/multi_feature_image_topic_2_vp5.png" media="(min-width: 1400px)">
              <source srcset="https://morayassets.z21.web.core.windows.net/images/multi-feature/multi_feature_image_topic_2_vp4.png" media="(min-width: 1084px)">
              <source srcset="https://morayassets.z21.web.core.windows.net/images/multi-feature/multi_feature_image_topic_2_vp3.png" media="(min-width: 860px)">
              <source srcset="https://morayassets.z21.web.core.windows.net/images/multi-feature/multi_feature_image_topic_2_vp2.png" media="(min-width: 540px)">
              <img src="https://morayassets.z21.web.core.windows.net/images/multi-feature/multi_feature_image_topic_2_vp1.png" class="img-fluid" alt="placeholder text for image">
            </picture>
          </div>
        </div>
      </div>
    </li>
  </ul>
</div>
`;

document.body.innerHTML = defaultHtml + customHtml;

const el = document.querySelector(Selector.DATA_MOUNT);
const collapseEls = el.querySelectorAll(CollapseSelector.DATA_MOUNT);
const customEl = document.querySelector('.custom-multi-feature');
const customAccordion = customEl.querySelector('.custom-accordion');
const customCollapseEls = customEl.querySelectorAll(CollapseSelector.DATA_MOUNT);

function _resizeWindowWidth(width) {
  window.innerWidth = width;
  window.dispatchEvent(new Event('resize'));
  jest.runAllTimers(); // debounce
}

describe('Multi feature', () => {
  let multiFeature;
  let collapses = [];
  jest.useFakeTimers();

  beforeEach(() => {
    collapseEls.forEach(el => {
      collapses.push(new Collapse({ el }));
    });

    multiFeature = new MultiFeature({ el });
  });

  afterEach(() => {
    if (multiFeature) {
      multiFeature.remove();
    }

    collapses.forEach(collapse => {
      collapse.remove();
    });
    collapses = [];

    jest.clearAllMocks();
  });

  describe('constructor()', () => {
    describe('in custom viewport', () => {
      beforeEach(() => {
        _resizeWindowWidth(1400);
      });

      it('should create the multi feature element', () => {
        expect(multiFeature.el).toEqual(el);
      });

      it('should open the first collapse if none are already open', () => {
        expect(collapses[0].isCollapsed).toBe(false);
        expect(multiFeature.open.el).toBe(collapses[0].el);
      });

      it('should display the feature on shown', () => {
        const collapse1 = collapses[1];
        const feature1 = collapse1.el.querySelector(Selector.FEATURE);
        collapse1.el.dispatchEvent(new Event(CollapseEventName.SHOWN));
        jest.runAllTimers(); // complete transitions

        expect(multiFeature.open.el).toBe(collapses[1].el);
        expect(feature1.classList.contains(ClassName.DISPLAY.NONE)).toBe(false);
      });

      it('should prevent default on hide if no other collapses are open', () => {
        const collapse0 = collapses[0];
        const feature0 = collapse0.el.querySelector(Selector.FEATURE);
        collapse0.el.dispatchEvent(new Event(CollapseEventName.HIDE));
        jest.runAllTimers(); // complete transitions

        expect(multiFeature.open.el).toBe(collapses[0].el);
        expect(feature0.classList.contains(ClassName.DISPLAY.NONE)).toBe(false);
      });

      it('should add display none class to feature on hide', () => {
        const feature0 = collapses[0].el.querySelector(Selector.FEATURE);
        expect(feature0.classList.contains(ClassName.DISPLAY.NONE)).toBe(false);
        collapses[1].show();
        jest.runAllTimers(); // complete transitions
        expect(feature0.classList.contains(ClassName.DISPLAY.NONE)).toBe(true);
      });

      it('should reset open property on hide if all collapses are closed', () => {
        _resizeWindowWidth(540);
        collapses.forEach(collapse => {
          collapse.hide();
          jest.runAllTimers(); // complete transitions
          expect(collapse.isCollapsed).toBe(true);
        });
        expect(multiFeature.open).toBeUndefined();
      });
    });
  });

  describe('browser resize', () => {
    it('should open the first collapse if all are closed when resizing into a custom viewport', () => {
      _resizeWindowWidth(540);
      collapses.forEach(collapse => {
        collapse.hide();
        jest.runAllTimers(); // complete transitions
        expect(collapse.isCollapsed).toBe(true);
      });
      expect(multiFeature.open).toBeUndefined();

      _resizeWindowWidth(1400);
      expect(multiFeature.open.el).toBe(collapses[0].el);
      expect(collapses[0].isCollapsed).toBe(false);
    });
  });

  describe('update()', () => {
    const newOpts = {
      accordionElement: customAccordion,
      customViewports: ['md', 'lg'],
      collapses: []
    };

    beforeEach(() => {
      customCollapseEls.forEach(el => {
        newOpts.collapses.push(new Collapse({ el }));
      });
    });

    afterEach(() => {
      newOpts.collapses.forEach(collapse => {
        collapse.remove();
      });
    });

    it('should trigger the `onUpdate` custom event', () => {
      multiFeature.el.dispatchEvent = jest.fn();
      multiFeature.update();
      expect(multiFeature.el.dispatchEvent).toBeCalled();
      expect(multiFeature.el.dispatchEvent.mock.calls[0][0].type).toBe(EventName.ON_UPDATE);
    });

    it('should update the opts', () => {
      multiFeature.update(newOpts);
      expect(multiFeature.accordionElement).toBe(newOpts.accordionElement);
      expect(multiFeature.customViewports).toBe(newOpts.customViewports);
      expect(multiFeature.collapses).toBe(newOpts.collapses);
    });
  });

  describe('remove()', () => {
    beforeEach(() => {
      multiFeature.el.dispatchEvent = jest.fn();
      multiFeature.remove();
    });

    it('should remove multi feature from the list of instances', () => {
      const instances = MultiFeature.getInstances();
      expect(instances.indexOf(multiFeature)).toEqual(-1);
    });

    it('should trigger the `onRemove` custom event', () => {
      expect(multiFeature.el.dispatchEvent).toBeCalled();
      expect(multiFeature.el.dispatchEvent.mock.calls[0][0].type).toBe(EventName.ON_REMOVE);
    });
  });
});
