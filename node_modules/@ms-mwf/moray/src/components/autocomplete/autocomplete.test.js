import AutoComplete, { EventName } from './autocomplete';

const testConfig = {
  ids: {
    container: 'id001',
    searchInput: 'id002',
    searchResultsContainer: 'id003',
    target: 'id004'
  },
  messages: {
    /* Constants copied from autocomplete.js */
    results: 'results are available, use up and down arrow keys to navigate',
    resultsTemplate: '%{numResults} results are available, use up and down arrow keys to navigate',
    noResults: 'No results are available'
  },
  inputStrings: {
    test1: {
      text: 'aut a',
      results: 3
    },
    test2: {
      text: 'delectus',
      results: 6
    }
  }
};

const autocompleteHtml =
  '<div id="' + testConfig.ids.container + '" data-mount="autocomplete" data-filter="true" data-suggestions="https://jsonplaceholder.typicode.com/todos/">' +
    '<form class="my-4" role="search">' +
      '<label for="search">Search label</label>' +
      '<div class="input-group">' +
        '<input id="' + testConfig.ids.searchInput + '" type="text" class="form-control search-input border-right-0" autocomplete="off" aria-label="input autocomplete" aria-expanded="false">' +
        '<div class="result-status sr-only" aria-atomic="true" aria-live="polite">10 results are available, use up and down arrow keys to navigate</div>' +
        '<div class="input-group-append">' +
            '<button class="btn border-gray bg-white glyph-append glyph-append-search border-left-0 pl-2" type="submit" aria-label="Search"></button>' +
        '</div>' +
      '</div>' +
      '<div id="' + testConfig.ids.searchResultsContainer + '" class="search-results-container">' +
        '<ul id="' + testConfig.ids.target + '" class="result-list">' +
          '<li class="result" id="sl01_item01">Suggestion 1/li>' +
          '<li class="result" id="sl01_item02">Suggestion 2</li>' +
          '<li class="result" id="sl01_item03">Suggestion 3</li>' +
        '</ul>' +
      '</div>' +
    '</form>' +
  '</div>';

const mouseupEvent = new MouseEvent('mouseup', { bubbles: true, cancelable: true });

// Set up our document body
document.body.innerHTML = autocompleteHtml;

describe('Autocomplete', () => {
  let instances;
  beforeAll(() => {
    document.querySelectorAll('[data-mount="autocomplete"]').forEach(node => {
      new AutoComplete({
        target: node,
        data: ['delectus aut autem', 'quis ut nam facilis et officia qui', 'fugiat veniam minus', 'et porro tempora', 'qui ullam ratione quibusdam voluptatem quia omnis', 'illo expedita consequatur quia in', 'quo adipisci enim quam ut ab', 'molestiae perspiciatis ipsa', 'illo est ratione doloremque quia maiores aut', 'vero rerum temporibus dolor', 'ipsa repellendus fugit nisi', 'et doloremque nulla', 'repellendus sunt dolores architecto voluptatum', 'ab voluptatum amet voluptas', 'accusamus eos facilis sint et aut voluptatem', 'quo laboriosam deleniti aut qui', 'dolorum est consequatur ea mollitia in culpa', 'molestiae ipsa aut voluptatibus pariatur dolor nihil', 'ullam nobis libero sapiente ad optio sint', 'distinctio vitae autem nihil ut molestias quo', 'et itaque necessitatibus maxime molestiae qui quas velit', 'adipisci non ad dicta qui amet quaerat doloribus ea', 'voluptas quo tenetur perspiciatis explicabo natus', 'aliquam aut quasi', 'veritatis pariatur delectus', 'nesciunt totam sit blanditiis sit', 'laborum aut in quam', 'nemo perspiciatis repellat ut dolor libero commodi blanditiis omnis', 'repudiandae totam in est sint facere fuga', 'earum doloribus ea doloremque quis', 'sint sit aut vero', 'porro aut necessitatibus eaque distinctio', 'excepturi deleniti adipisci voluptatem et neque optio illum ad', 'sunt cum tempora', 'totam quia non', 'doloremque quibusdam asperiores libero corrupti illum qui omnis', 'totam atque quo nesciunt', 'rerum perferendis error quia ut eveniet', 'tempore ut sint quis recusandae', 'cum debitis quis accusamus doloremque ipsa natus sapiente omnis', 'velit soluta adipisci molestias reiciendis harum', 'vel voluptatem repellat nihil placeat corporis', 'nam qui rerum fugiat accusamus', 'sit reprehenderit omnis quia', 'ut necessitatibus aut maiores debitis officia blanditiis velit et', 'distinctio exercitationem ab doloribus', 'nesciunt dolorum quis recusandae ad pariatur ratione', 'quis et est ut voluptate quam dolor', 'deleniti ea temporibus enim', 'pariatur et magnam ea doloribus similique voluptatem rerum quia', 'est dicta totam qui explicabo doloribus qui dignissimos', 'et sequi qui architecto ut adipisci', 'odit optio omnis qui sunt', 'et placeat et tempore aspernatur sint numquam', 'voluptas consequatur qui ut quia magnam nemo esse', 'fugiat pariatur ratione ut asperiores necessitatibus magni', 'rerum eum molestias autem voluptatum sit optio', 'quia voluptatibus voluptatem quos similique maiores repellat', 'doloribus sint dolorum ab adipisci itaque dignissimos aliquam suscipit', 'ut sequi accusantium et mollitia delectus sunt', 'aut velit saepe ullam', 'praesentium facilis facere quis harum voluptatibus voluptatem eum', 'sint amet quia totam corporis qui exercitationem commodi', 'expedita tempore nobis eveniet laborum maiores', 'occaecati adipisci est possimus totam', 'sequi dolorem sed', 'maiores aut nesciunt delectus exercitationem vel assumenda eligendi at', 'reiciendis est magnam amet nemo iste recusandae impedit quaerat', 'eum ipsa maxime ut', 'tempore molestias dolores rerum sequi voluptates ipsum consequatur', 'suscipit qui totam', 'voluptates eum voluptas et dicta', 'sunt veritatis ut voluptate', 'et quia ad iste a', 'laudantium quae eligendi consequatur quia et vero autem', 'vitae aut excepturi laboriosam sint aliquam et et accusantium', 'sequi ut omnis et', 'molestiae nisi accusantium tenetur dolorem et', 'in omnis laboriosam', 'odio iure consequatur molestiae quibusdam necessitatibus quia sint', 'facilis modi saepe mollitia', 'vel nihil et molestiae iusto assumenda nemo quo ut', 'nobis suscipit ducimus enim asperiores voluptas', 'dolorum laboriosam eos qui iure aliquam', 'debitis accusantium ut quo facilis nihil quis sapiente necessitatibus', 'neque voluptates ratione', 'excepturi a et neque qui expedita vel voluptate', 'explicabo enim cumque porro aperiam occaecati minima', 'sed ab consequatur', 'non sunt delectus illo nulla tenetur enim omnis', 'excepturi non laudantium quo', 'totam quia dolorem et illum repellat voluptas optio', 'ad illo quis voluptatem temporibus', 'praesentium facilis omnis laudantium fugit ad iusto nihil nesciunt', 'autem temporibus harum quisquam in culpa', 'aut aut ea corporis', 'consectetur impedit quisquam qui deserunt non rerum consequuntur eius', 'quia atque aliquam sunt impedit voluptatum rerum assumenda nisi', 'sed et ea eum', 'ipsa dolores vel facilis ut', 'sequi quae est et qui qui eveniet asperiores', 'quia modi consequatur vero fugiat', 'corporis ducimus ea perspiciatis iste', 'dolorem laboriosam vel voluptas et aliquam quasi', 'inventore aut nihil minima laudantium hic qui omnis', 'esse et quis iste est earum aut impedit', 'aut quasi autem iste tempore illum possimus', 'ut asperiores perspiciatis veniam ipsum rerum saepe', 'voluptatem libero consectetur rerum ut', 'eius omnis est qui voluptatem autem', 'rerum culpa quis harum', 'qui molestiae voluptatibus velit iure harum quisquam', 'et labore eos enim rerum consequatur sunt', 'molestiae doloribus et laborum quod ea', 'facere ipsa nam eum voluptates reiciendis vero qui', 'asperiores illo tempora fuga sed ut quasi adipisci', 'qui sit non', 'placeat minima consequatur rem qui ut', 'aut consectetur in blanditiis deserunt quia sed laboriosam', 'explicabo consectetur debitis voluptates quas quae culpa rerum non', 'maiores accusantium architecto necessitatibus reiciendis ea aut', 'ut eum exercitationem sint', 'molestiae suscipit ratione nihil odio libero impedit vero totam', 'eum itaque quod reprehenderit et facilis dolor autem ut', 'esse quas et quo quasi exercitationem', 'animi voluptas quod perferendis est', 'eos amet tempore laudantium fugit a', 'accusamus adipisci dicta qui quo ea explicabo sed vero', 'odit eligendi recusandae doloremque cumque non', 'ea aperiam consequatur qui repellat eos', 'rerum non ex sapiente', 'voluptatem nobis consequatur et assumenda magnam', 'nam quia quia nulla repellat assumenda quibusdam sit nobis', 'dolorem veniam quisquam deserunt repellendus', 'debitis vitae delectus et harum accusamus aut deleniti a', 'debitis adipisci quibusdam aliquam sed dolore ea praesentium nobis', 'et praesentium aliquam est', 'ex hic consequuntur earum omnis alias ut occaecati culpa', 'omnis laboriosam molestias animi sunt dolore', 'natus corrupti maxime laudantium et voluptatem laboriosam odit', 'reprehenderit quos aut aut consequatur est sed', 'quos quo possimus suscipit minima ut', 'et quis minus quo a asperiores molestiae', 'recusandae quia qui sunt libero', 'ea odio perferendis officiis', 'quisquam aliquam quia doloribus aut', 'fugiat aut voluptatibus corrupti deleniti velit iste odio', 'harum ad aperiam quis', 'similique aut quo', 'et placeat temporibus voluptas est tempora quos quibusdam', 'nesciunt itaque commodi tempore', 'debitis nisi et dolorem repellat et', 'inventore saepe cumque et aut illum enim', 'omnis nulla eum aliquam distinctio', 'molestias modi perferendis perspiciatis', 'voluptates dignissimos sed doloribus animi quaerat aut', 'explicabo odio est et', 'consequuntur animi possimus', 'vel non beatae est', 'culpa eius et voluptatem et', 'accusamus sint iusto et voluptatem exercitationem', 'temporibus atque distinctio omnis eius impedit tempore molestias pariatur', 'ut quas possimus exercitationem sint voluptates', 'rerum debitis voluptatem qui eveniet tempora distinctio a', 'sed ut vero sit molestiae', 'rerum ex veniam mollitia voluptatibus pariatur', 'consequuntur aut ut fugit similique', 'dignissimos quo nobis earum saepe', 'quis eius est sint explicabo', 'numquam repellendus a magnam', 'ipsam aperiam voluptates qui']
      });
    });
    instances = AutoComplete.getInstances();
  });

  beforeEach(() => {
    if (instances.length > 1) {
      instances[1].remove();
    }
  });

  describe.each`
    data | typeDescription
    ${true} | ${'true<boolean>'}
    ${false} | ${'false<boolean>'}
    ${null} | ${'null'}
    ${undefined} | ${'undefined'}
    ${100} | ${'number'}
    ${[1, 2, 3]} | ${'Array with incorrect type'}
    ${['Help me!', { value: 'Very good!' }, 3]} | ${'Mixed array with correct and incorrect types'}
    ${[{ text: 'Very good!' }, { text: 'Thank you!' }]} | ${'Array<object> with entries missing the "value" key'}
    ${[{ value: 'Very good!' }, { text: 'Thank you!' }]} | ${'Array<object> with an entry missing the "value" key'}
  `('Constructor should throw TypeError when data is in the incorrect format', ({ data, typeDescription }) => {
    it(`when data is in the format: ${typeDescription}`, () => {
      expect(() => {
        new AutoComplete({ target: document.querySelector('[data-mount="autocomplete"]'), data });
      }).toThrow(TypeError);
    });
  });

  describe.each`
    data | typeDescription
    ${['Very good!', 'Thank you!']} | ${'Array<string>'}
    ${[{ value: 'Very good!' }, { value: 'Thank you!' }]} | ${'Array{value: <string>}'}
    ${['Hello!', 'I\'m sorry!', 'Help me!', { value: 'Very good!' }, { value: 'Thank you!' }]} | ${'Mixed array of objects and strings'}
  `('Constructor should construct an instance when data is in the correct format', ({ data, typeDescription }) => {
    it(`when data is in the format: ${typeDescription}`, () => {
      expect((() => new AutoComplete({
        target: document.querySelector('[data-mount="autocomplete"]'),
        data
      }))()).toBeInstanceOf(AutoComplete);
    });
  });

  it('should be initialized', () => {
    expect(instances.length).toEqual(1);
    // If filtered, suggestedData attribute is the URL to pull the data from. Attribute is set in markup.
    // expect(instances[0].suggestedData).toEqual('https://jsonplaceholder.typicode.com/todos/');
    expect(instances[0].resultsAvailableTemplateMany).toEqual(testConfig.messages.resultsTemplate);
    expect(instances[0].noResultsMsg).toEqual(testConfig.messages.noResults);

    expect(instances[0].searchInput.id).toEqual(testConfig.ids.searchInput);
    expect(instances[0].searchInput.getAttribute('aria-expanded')).toEqual('false');
    expect(instances[0].searchResultsContainer.id).toEqual(testConfig.ids.searchResultsContainer);
    expect(instances[0].target.id).toEqual(testConfig.ids.target);
    expect(instances[0].container.id).toEqual(testConfig.ids.container);
  });

  describe('When the test value is entered into the input field', () => {
    beforeAll(() => {
      instances[0].update(testConfig.inputStrings.test1.text);
    });

    it('the suggestions menu should be open', () => {
      expect(instances[0].target.classList.contains('active')).toEqual(true);
      expect(instances[0].searchInput.getAttribute('aria-expanded')).toEqual('true');
      expect(instances[0].container.querySelector('.result-status').textContent.match(testConfig.messages.results)).toBeTruthy();
      expect(instances[0].shown).toBe(true);
    });

    it('there should be 3 results', () => {
      expect(instances[0].target.children.length).toEqual(testConfig.inputStrings.test1.results);
    });
  });

  describe('When the test value is updated', () => {
    beforeAll(() => {
      instances[0].update(testConfig.inputStrings.test2.text);
    });

    it('the suggestions menu should be open', () => {
      expect(instances[0].target.classList.contains('active')).toEqual(true);
      expect(instances[0].shown).toEqual(true);
      expect(instances[0].searchInput.getAttribute('aria-expanded')).toEqual('true');
      expect(instances[0].container.querySelector('.result-status').textContent.match(testConfig.messages.results)).toBeTruthy();
    });

    it('there should be 7 results', () => {
      expect(instances[0].target.children.length).toEqual(testConfig.inputStrings.test2.results);
    });
  });

  describe('When the test value is empty', () => {
    beforeAll(() => {
      instances[0].update('');
    });

    it('the suggestions menu should be closed', () => {
      expect(instances[0].target.classList.contains('active')).toEqual(false);
      expect(instances[0].searchInput.getAttribute('aria-expanded')).toEqual('false');
      expect(instances[0].container.querySelector('.result-status').textContent.match(testConfig.messages.noResults)).toBeNull();
      expect(instances[0].shown).toBe(false);
    });
  });

  describe('When the input has no matches', () => {
    beforeAll(() => {
      instances[0].update('asdf');
    });

    it('the suggestions menu should be closed', () => {
      expect(instances[0].target.classList.contains('active')).toEqual(false);
      expect(instances[0].searchInput.getAttribute('aria-expanded')).toEqual('false');
      expect(instances[0].shown).toBe(false);
    });
  });

  describe('When a result is selected', () => {
    beforeAll(() => {
      instances[0].update(testConfig.inputStrings.test2.text);
      instances[0].target.querySelector(':nth-child(4)').dispatchEvent(mouseupEvent);
    });

    it('the suggestions menu should be closed', () => {
      expect(instances[0].target.classList.contains('active')).toEqual(false);
      expect(instances[0].searchInput.getAttribute('aria-expanded')).toEqual('false');
      expect(instances[0].container.querySelector('.result-status').textContent.match(testConfig.messages.noResults)).toBeNull();
      expect(instances[0].shown).toBe(false);
    });
  });

  describe('When the data source is updated', () => {
    beforeAll(() => {
      instances[0].updateDataSource(['Hello!', 'Thank you!', 'I\'m sorry!', 'Very good!', 'Help me!']);

      instances[0].update('he');
    });

    it('Should return 2 results', () => {
      expect(instances[0].target.children.length).toEqual(2);
    });
  });

  describe('open with preventDefault', () => {
    it('should cancel open if default is prevented', () => {
      instances[0].container.dispatchEvent = jest.fn();
      instances[0].close();
      instances[0].container.dispatchEvent = jest.fn(e => e.preventDefault());
      instances[0].open();

      expect(instances[0].container.dispatchEvent).toBeCalled();
      expect(instances[0].container.dispatchEvent.mock.calls[0][0].type).toBe(EventName.ON_OPEN);
      expect(instances[0].container.dispatchEvent.mock.calls[0][0].defaultPrevented).toBe(true);
      expect(instances[0].shown).toBe(false);
      expect(instances[0].target.classList.contains('active')).toEqual(false);
      expect(instances[0].searchInput.getAttribute('aria-expanded')).toEqual('false');
    });
  });

  describe('close with preventDefault', () => {
    it('should cancel close if default is prevented', () => {
      instances[0].container.dispatchEvent = jest.fn();
      instances[0].open();
      instances[0].container.dispatchEvent = jest.fn(e => e.preventDefault());
      instances[0].close();

      expect(instances[0].container.dispatchEvent).toBeCalled();
      expect(instances[0].container.dispatchEvent.mock.calls[0][0].type).toBe(EventName.ON_CLOSE);
      expect(instances[0].container.dispatchEvent.mock.calls[0][0].defaultPrevented).toBe(true);
      expect(instances[0].shown).toBe(true);
      expect(instances[0].target.classList.contains('active')).toEqual(true);
      expect(instances[0].searchInput.getAttribute('aria-expanded')).toEqual('true');
    });
  });
});
