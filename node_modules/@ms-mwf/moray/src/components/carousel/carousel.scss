@import "../../styles/functions";
@import "../../variables";
@import "../../styles/mixins";
@import "mixins";

// Notes on the classes:
//
// 1. .carousel.pointer-event should ideally be pan-y (to allow for users to scroll vertically)
//    even when their scroll action started on a carousel, but for compatibility (with Firefox)
//    we're preventing all actions instead
// 2. The .carousel-item-left and .carousel-item-right is used to indicate where
//    the active slide is heading.
// 3. .active.carousel-item is the current slide.
// 4. .active.carousel-item-left and .active.carousel-item-right is the current
//    slide in its in-transition state. Only one of these occurs at a time.
// 5. .carousel-item-next.carousel-item-left and .carousel-item-prev.carousel-item-right
//    is the upcoming slide in transition.

.carousel {
  position: relative;

  .sr-only-focusable {
    z-index: 5;
    background-color: $body-bg;

    @include theme-inverse {
      background-color: $body-bg-inverse;
    }
  }
}

.carousel.pointer-event {
  touch-action: pan-y;
}

.carousel-inner {
  position: relative;
  width: 100%;
  overflow: hidden;
  @include clearfix;
}

.carousel-item {
  position: relative;
  display: none;
  float: left;
  width: 100%;
  margin-right: -100%;
  backface-visibility: hidden;
  @include transition($carousel-transition);
}

// Used by JS to calculate heights of hidden slides
.carousel-item.get-height {
  display: block;
  visibility: hidden;
  opacity: 0;
}

.carousel-item.active,
.carousel-item-next,
.carousel-item-prev {
  display: block;
}

.carousel-item-next:not(.carousel-item-left),
.active.carousel-item-right {
  transform: translateX(100%);
}

.carousel-item-prev:not(.carousel-item-right),
.active.carousel-item-left {
  transform: translateX(-100%);
}


//
// Alternate transitions
//

.carousel-fade {
  .carousel-item {
    opacity: 0;
    transition-property: opacity;
    transform: none;
  }

  .carousel-item.active,
  .carousel-item-next.carousel-item-left,
  .carousel-item-prev.carousel-item-right {
    z-index: 1;
    opacity: 1;
  }

  .active.carousel-item-left,
  .active.carousel-item-right {
    z-index: 0;
    opacity: 0;
    @include transition(0s $carousel-transition-duration opacity);
  }
}

//
// Sneak peek carousels
// (highlight sneak peek, image sneak peek)
//

.carousel-sneak-peek {
  @include vfi-indicators-spacing;

  .carousel-inner {
    perspective: 1000px;
    margin: auto;
    display: flex;
    align-items: stretch;
    @include ltr {
      flex-direction: row;
    }
    @include rtl {
      flex-direction: row-reverse;
    }
  }

  .carousel-item {
    display: block;
    visibility: hidden;
    opacity: 0;
    z-index: 0;
    background-color: $carousel-highlight-background-color; // Prevent background elements from showing through
    @include transition($carousel-highlight-slide-transition);

    &.carousel-item-next,
    &.carousel-item-prev,
    &.active {
      visibility: visible;
      opacity: 1;
    }

    &.active {
      z-index: 2;
    }

    &.sliding-in {
      z-index: 3;
    }
  }

  .card-img-overlay > .card-foreground .card {
    min-height: auto;
  }

  .carousel-item-next:not(.carousel-item-left),
  .active.carousel-item-right,
  .carousel-item-prev:not(.carousel-item-right),
  .active.carousel-item-left {
    z-index: 1;
  }

  .carousel-item-next:not(.carousel-item-left),
  .active.carousel-item-right {
    @include ltr {
      transform: translateX($carousel-highlight-slide-transform);
    }
    @include rtl {
      transform: translateX(-#{$carousel-highlight-slide-transform});
    }
  }

  .carousel-item-prev:not(.carousel-item-right),
  .active.carousel-item-left {
    @include ltr {
      transform: translateX(-#{$carousel-highlight-slide-transform});
    }
    @include rtl {
      transform: translateX($carousel-highlight-slide-transform);
    }
  }

  .carousel-controls {
    .carousel-indicators {
      bottom: $carousel-control-group-bottom;
    }
  }
}

//
// Variable height carousels
//

.carousel-variable-height {
  @include vfi-indicators-spacing;

  // Add padding and negative margin to the right and left to allow VFI
  // to be visible, since overflow is set to hidden
  padding-right: $vfi-outline-width;
  padding-left: $vfi-outline-width;
  margin-right: -$vfi-outline-width;
  margin-left: -$vfi-outline-width;
}

//
// Highlight-style carousels
// (Highlight, Full-bleed, Highlight sneak peek, image sneak peek)
//

.carousel-highlight {
  @media screen and (min-width: map-get($grid-breakpoints, "lg")) {
    align-items: center;
  }

  .carousel-item {
    &.active {
      .card {
        opacity: 1;
        visibility: visible;
      }
    }

    &:not(.active) {
      .card {
        opacity: 0;
        visibility: hidden;
      }
    }

    &.sliding-in {
      .card {
        opacity: 1;
        visibility: visible;
        @include transition($carousel-highlight-card-transition);
      }
    }
  }

  .carousel-item-next:not(.carousel-item-left),
  .active.carousel-item-right,
  .carousel-item-prev:not(.carousel-item-right),
  .active.carousel-item-left {
    .card {
      opacity: 0;
    }
  }
}

//
// Layered highlight-style carousels
// (Highlight sneak peek and full-width image)
//

.carousel-highlight.carousel-sneak-peek {
  .carousel-inner {
    width: $carousel-highlight-width;
  }

  .carousel-item-next:not(.carousel-item-left),
  .active.carousel-item-right,
  .carousel-item-prev:not(.carousel-item-right),
  .active.carousel-item-left {
    @media screen and (min-width: map-get($grid-breakpoints, "lg")) {
      opacity: $carousel-highlight-slide-opacity;
    }
  }

  .carousel-item-next:not(.carousel-item-left),
  .active.carousel-item-right {
    @media screen and (min-width: map-get($grid-breakpoints, "md")) {
      @include ltr {
        transform: translateX($carousel-highlight-slide-transform-md);
      }
      @include rtl {
        transform: translateX(-#{$carousel-highlight-slide-transform-md});
      }
    }

    @media screen and (min-width: map-get($grid-breakpoints, "lg")) {
      @include ltr {
        transform: scale($carousel-highlight-controls-transform) translate($carousel-highlight-slide-transform-lg);
      }
      @include rtl {
        transform: scale($carousel-highlight-controls-transform) translate(-#{$carousel-highlight-slide-transform-lg});
      }
    }
  }

  .carousel-item-prev:not(.carousel-item-right),
  .active.carousel-item-left {
    @media screen and (min-width: map-get($grid-breakpoints, "md")) {
      @include ltr {
        transform: translateX(-#{$carousel-highlight-slide-transform-md});
      }
      @include rtl {
        transform: translateX($carousel-highlight-slide-transform-md);
      }
    }

    @media screen and (min-width: map-get($grid-breakpoints, "lg")) {
      @include ltr {
        transform: scale($carousel-highlight-controls-transform) translate(-#{$carousel-highlight-slide-transform-lg});
      }
      @include rtl {
        transform: scale($carousel-highlight-controls-transform) translate($carousel-highlight-slide-transform-lg);
      }
    }
  }

  .carousel-controls {
    @media screen and (min-width: map-get($grid-breakpoints, "lg")) {
      .carousel-control-prev,
      .carousel-control-next {
        transform: scale($carousel-highlight-controls-transform);
        transform-style: flat;
      }
    }
  }

  @media screen and (max-width: map-get($grid-breakpoints, "lg") - 1) {
    @include group-carousel-controls;
  }
}

//
// Highlight Full-bleed and highlight carousels
//

.carousel-highlight:not(.carousel-sneak-peek) {
  .carousel-item {
    // Slower transition on wider screens
    @media screen and (min-width: map-get($grid-breakpoints, "md")) {
      &.sliding-in {
        .card {
          @include transition($carousel-full-bleed-card-transition);
        }
      }

      @include transition($carousel-full-bleed-transition-md);
    }
  }

  .card-img-overlay > .card-foreground .card {
    min-height: auto;
  }

  @include group-carousel-controls;
}

//
// Carousel content cards
//

.carousel-sneak-peek.carousel-content-cards {
  .carousel-inner {
    width: $carousel-content-cards-width;

    @media screen and (min-width: map-get($grid-breakpoints, "md")) {
      width: $carousel-content-cards-width-md;
    }

    @media screen and (min-width: map-get($grid-breakpoints, "xl")) {
      width: $carousel-content-cards-width-xl;
    }
  }

  .carousel-item {
    display: flex;
    background: none;
    &.active {
      /* stylelint-disable-next-line selector-max-class */
      .card-header,
      .card-body,
      .card-footer {
        opacity: 1;
        visibility: visible;
      }
    }

    &:not(.active) {
      .card-header,
      .card-body,
      .card-footer {
        opacity: 0;
        visibility: hidden;
      }
    }

    &.sliding-in {
      /* stylelint-disable-next-line selector-max-class */
      .card-header,
      .card-body,
      .card-footer {
        opacity: 1;
        visibility: visible;
        @include transition($carousel-highlight-card-transition);
      }
    }
  }

  .carousel-item-next:not(.carousel-item-left),
  .active.carousel-item-right,
  .carousel-item-prev:not(.carousel-item-right),
  .active.carousel-item-left {
    @media screen and (min-width: map-get($grid-breakpoints, "md")) {
      opacity: $carousel-highlight-slide-opacity;
    }
    /* stylelint-disable-next-line selector-max-class */
    .card-header,
    .card-body,
    .card-footer {
      opacity: 0;
    }
  }

  .carousel-item-next:not(.carousel-item-left),
  .active.carousel-item-right {
    @media screen and (min-width: map-get($grid-breakpoints, "md")) {
      @include ltr {
        transform: scale($carousel-highlight-controls-transform) translate($carousel-content-cards-transform-md);
      }
      @include rtl {
        transform: scale($carousel-highlight-controls-transform) translate(-#{$carousel-content-cards-transform-md});
      }
    }

    @media screen and (min-width: map-get($grid-breakpoints, "xl")) {
      @include ltr {
        transform: scale($carousel-highlight-controls-transform) translate($carousel-content-cards-transform-xl);
      }
      @include rtl {
        transform: scale($carousel-highlight-controls-transform) translate(-#{$carousel-content-cards-transform-xl});
      }
    }
  }

  .carousel-item-prev:not(.carousel-item-right),
  .active.carousel-item-left {
    @media screen and (min-width: map-get($grid-breakpoints, "md")) {
      @include ltr {
        transform: scale($carousel-highlight-controls-transform) translate(-#{$carousel-content-cards-transform-md});
      }
      @include rtl {
        transform: scale($carousel-highlight-controls-transform) translate($carousel-content-cards-transform-md);
      }
    }

    @media screen and (min-width: map-get($grid-breakpoints, "xl")) {
      @include ltr {
        transform: scale($carousel-highlight-controls-transform) translate(-#{$carousel-content-cards-transform-xl});
      }
      @include rtl {
        transform: scale($carousel-highlight-controls-transform) translate($carousel-content-cards-transform-xl);
      }
    }
  }

  .carousel-controls {
    @media screen and (min-width: map-get($grid-breakpoints, "md")) {
      .carousel-control-prev,
      .carousel-control-next {
        transform: scale($carousel-highlight-controls-transform);
        transform-style: flat;
        width: $carousel-content-cards-controls-md;
      }

      .carousel-control-prev {
        justify-content: flex-start;
      }

      .carousel-control-next {
        justify-content: flex-end;
      }
    }

    @media screen and (min-width: map-get($grid-breakpoints, "xl")) {
      .carousel-control-prev,
      .carousel-control-next {
        width: $carousel-content-cards-controls-xl;
      }
    }
  }

  @media screen and (max-width: map-get($grid-breakpoints, "md") - 1) {
    @include group-carousel-controls;
  }
}

//
// Product card carousel
//

.carousel-product-card {
  .container {
    width: 87%;
    height: 100%;

    @media screen and (min-width: map-get($grid-breakpoints, "md")) {
      width: 90%;
    }
  }

  .row {
    flex-wrap: nowrap;
    overflow: hidden;
    height: 100%;
  }

  .carousel-control-prev,
  .carousel-control-next {
    @media screen and (max-width: map-get($grid-breakpoints, "md") - 1) {
      width: 7%;
    }

    &::after {
      font-size: $carousel-small-glyph-font-size;
    }
  }
}

//
// Feature and Banner carousels
//
.carousel-lg-side-controls {
  .carousel-item > div {
    height: 100%;
  }

  @media screen and (min-width: map-get($grid-breakpoints, "lg")) {
    .carousel-inner {
      width: $carousel-highlight-width;
      margin: auto;
    }
  }

  .carousel-controls {
    .carousel-indicators {
      bottom: $carousel-control-group-bottom;
    }
  }

  @media screen and (max-width: map-get($grid-breakpoints, "lg") - 1) {
    @include group-carousel-controls;
  }
}

//
// Left/right controls for nav
//

.carousel-control-prev,
.carousel-control-next {
  position: absolute;
  top: 0;
  bottom: 0;
  z-index: 5;
  // Use flex for alignment (1-3)
  display: flex; // 1. allow flex styles
  align-items: center; // 2. vertically center contents
  justify-content: center; // 3. horizontally center contents
  width: $carousel-control-width;
  min-width: $carousel-control-min-size; // Minimum touch area size for a11y
  min-height: $carousel-control-min-size; // Minimum touch area size for a11y
  color: inherit;
  text-align: center;
  border: 0;
  padding: 0;
  background: none;
  // Opinionated: add "hand" cursor to non-disabled .btn elements
  cursor: pointer;

  &:disabled {
    opacity: 0.3;
    cursor: default;
  }

  &::after {
    font-family: $font-family-glyph;
    font-weight: 400; // ensure glyphs never inherit bold styles
    font-size: $carousel-control-glyph-font-size;
    @include transition($transition-transform);
  }
}

.carousel-control-prev {
  @include ltr {
    left: 0;

    &::after {
      content: map-get($glyphs, "chevron-left");
    }

    &:not(:disabled):hover::after {
      transform: translate(-$carousel-control-hover-position, 0);
    }
  }
  @include rtl {
    right: 0;

    &::after {
      content: map-get($glyphs, "chevron-right");
    }

    &:not(:disabled):hover::after {
      transform: translate($carousel-control-hover-position, 0);
    }
  }
}

.carousel-control-next {
  @include ltr {
    right: 0;

    &::after {
      content: map-get($glyphs, "chevron-right");
    }

    &:not(:disabled):hover::after {
      transform: translate($carousel-control-hover-position, 0);
    }
  }
  @include rtl {
    left: 0;

    &::after {
      content: map-get($glyphs, "chevron-left");
    }

    &:not(:disabled):hover::after {
      transform: translate(-$carousel-control-hover-position, 0);
    }
  }
}


// Indicator pips
//
// Add an ordered list with the following class and add a list item for each
// slide your carousel holds.

.carousel-indicators {
  position: absolute;
  right: 0;
  bottom: 0;
  left: 0;
  z-index: 15;
  display: flex;
  justify-content: center;
  padding-left: 0; // override <ol> default
  list-style: none;

  li {
    box-sizing: content-box;
    flex: 0 1 auto;
    margin-right: $carousel-indicator-spacer;
    margin-left: $carousel-indicator-spacer;

    &::after {
      font-family: $font-family-glyph;
      font-weight: 400; // ensure glyphs never inherit bold styles
      font-size: $carousel-indicator-glyph-font-size;
      content: map-get($glyphs, "indicator-dot-outline");
    }
  }

  .active::after {
    content: map-get($glyphs, "indicator-dot-filled");
  }
}


// Optional captions
//
//

.carousel-caption {
  position: absolute;
  right: (100% - $carousel-caption-width) / 2;
  bottom: 20px;
  left: (100% - $carousel-caption-width) / 2;
  z-index: 10;
  padding-top: 20px;
  padding-bottom: 20px;
  color: $carousel-caption-color;
  text-align: center;
}
