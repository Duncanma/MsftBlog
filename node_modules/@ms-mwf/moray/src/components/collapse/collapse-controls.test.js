import CollapseControls, { Selector } from '../collapse/collapse-controls';
import Collapse, { Selector as CollapseSelector } from './collapse';

jest.useFakeTimers();

describe(`${CollapseControls.name}`, () => {
  const controlsId = 'collapse-controls';
  const accordionId = 'accordion';
  const triggerId = 'collapseTrigger';
  const targetId = 'collapseTarget';
  const html = `
    <div id="${controlsId}" data-target="#${accordionId}">
      <button data-action="expand" type="button">Expand all</button>
      <button data-action="collapse" type="button">Collapse all</button>
    </div>
    <ul id="${accordionId}">
      <li>
        <button id="${triggerId}1" data-mount="collapse" data-target="#${targetId}1" aria-expanded="false" aria-controls="collapseExample">Collapse Trigger 1</button>
        <div class="collapse" id="${targetId}1">Text 1</div>
      </li>
      <li>
        <button id="${triggerId}2" data-mount="collapse" data-target="#${targetId}2" aria-expanded="false" aria-controls="collapseExample">Collapse Trigger 2</button>
        <div class="collapse" id="${targetId}2">Text 2</div>
      </li>
      <li>
        <button id="${triggerId}3" data-mount="collapse" data-target="#${targetId}3" aria-expanded="false" aria-controls="collapseExample">Collapse Trigger</button>
        <div class="collapse" id="${targetId}3">Text</div>
      </li>
    <ul>
  `;
  let triggers;
  let targets;
  let controls;
  let collapseAllButton;
  let expandAllButton;

  beforeAll(() => {
    document.body.innerHTML = html;
    controls = document.getElementById(controlsId);
    triggers = document.querySelectorAll('button[data-mount="collapse"]');
    targets = document.querySelectorAll('.collapse');
    collapseAllButton = controls.querySelector(Selector.DATA_ACTION_COLLAPSE);
    expandAllButton = controls.querySelector(Selector.DATA_ACTION_EXPAND);
  });

  beforeEach(() => {
    // clear all CollapseControls instances
    while (CollapseControls.getInstances().length) {
      CollapseControls.getInstances()[0].remove();
    }

    // clear all Collapse instances
    while (Collapse.getInstances().length) {
      Collapse.getInstances()[0].remove();
    }
  });

  describe('constructor', () => {
    it('should disable collapse-all button if all are collapsed', () => {
      // expand all collapses
      triggers.forEach(trigger => {
        trigger.setAttribute('aria-expanded', 'false');
      });
      // CollapseControls depend on Collapse instances
      document.querySelectorAll(CollapseSelector.DATA_MOUNT).forEach(collapse => new Collapse({ el: collapse }));
      new CollapseControls({ el: controls });

      expect(collapseAllButton.classList).toContain('inactive');
    });

    it('should disable expand-all button if all are expanded', () => {
      // expand all collapses
      triggers.forEach(trigger => {
        trigger.setAttribute('aria-expanded', 'true');
      });
      // CollapseControls depend on Collapse instances
      document.querySelectorAll(CollapseSelector.DATA_MOUNT).forEach(collapse => new Collapse({ el: collapse }));
      new CollapseControls({ el: controls });

      expect(expandAllButton.classList).toContain('inactive');
    });

    it('should enable expand-all button if any are collapsed', () => {
      // collapse at least one collapse
      triggers[0].setAttribute('aria-expanded', 'false');
      // CollapseControls depend on Collapse instances
      document.querySelectorAll(CollapseSelector.DATA_MOUNT).forEach(collapse => new Collapse({ el: collapse }));
      new CollapseControls({ el: controls });

      expect(expandAllButton.classList).not.toContain('inactive');
    });

    it('should enable collapse-all button if any are expanded', () => {
      // collapse at least one collapse
      triggers[0].setAttribute('aria-expanded', 'true');
      // CollapseControls depend on Collapse instances
      document.querySelectorAll(CollapseSelector.DATA_MOUNT).forEach(collapse => new Collapse({ el: collapse }));
      new CollapseControls({ el: controls });

      expect(collapseAllButton.classList).not.toContain('inactive');
    });
  });

  describe('collapseAll()', () => {
    beforeEach(() => {
      // expand one collapse
      triggers[0].setAttribute('aria-expanded', 'true');
      targets[0].classList.add('show');
      // CollapseControls depend on Collapse instances
      document.querySelectorAll(CollapseSelector.DATA_MOUNT).forEach(collapse => new Collapse({ el: collapse }));
    });

    it('should call `hide()` on each Collapse', () => {
      const instance = new CollapseControls({ el: controls });
      // assign mocks before collapsing
      instance.collapseList.forEach(collapse => {
        collapse.hide = jest.fn();
      });

      instance.collapseAll();

      instance.collapseList.forEach(collapse => {
        expect(collapse.hide).toBeCalled();
      });
    });

    it('should disable the "Collapse All" button', () => {
      const instance = new CollapseControls({ el: controls });
      instance.collapseAll();
      jest.runAllTimers(); // complete transitions

      expect(collapseAllButton.getAttribute('aria-pressed')).toBe('true');
      expect(collapseAllButton.getAttribute('aria-disabled')).toBe('true');
      expect(collapseAllButton.classList).toContain('inactive');
    });

    it('should enable the "Expand All" button', () => {
      const instance = new CollapseControls({ el: controls });
      instance.collapseAll();
      jest.runAllTimers(); // complete transitions

      expect(expandAllButton.getAttribute('aria-pressed')).toBe('false');
      expect(expandAllButton.getAttribute('aria-disabled')).toBe('false');
      expect(expandAllButton.classList).not.toContain('inactive');
    });
  });

  describe('expandAll()', () => {
    beforeEach(() => {
      // collapse one collapse
      triggers[0].setAttribute('aria-expanded', 'false');
      targets[0].classList.remove('show');
      // CollapseControls depend on Collapse instances
      document.querySelectorAll(CollapseSelector.DATA_MOUNT).forEach(collapse => new Collapse({ el: collapse }));
    });

    it('should call `show()` on each Collapse', () => {
      const instance = new CollapseControls({ el: controls });
      // assign mocks before expanding
      instance.collapseList.forEach(collapse => {
        collapse.show = jest.fn();
      });

      instance.expandAll();

      instance.collapseList.forEach(collapse => {
        expect(collapse.show).toBeCalled();
      });
    });

    it('should disable the "Expand All" button', () => {
      const instance = new CollapseControls({ el: controls });
      instance.expandAll();
      jest.runAllTimers(); // complete transitions

      expect(expandAllButton.getAttribute('aria-pressed')).toBe('true');
      expect(expandAllButton.getAttribute('aria-disabled')).toBe('true');
      expect(expandAllButton.classList).toContain('inactive');
    });

    it('should enable the "Collapse All" button', () => {
      const instance = new CollapseControls({ el: controls });
      instance.expandAll();
      jest.runAllTimers(); // complete transitions

      expect(collapseAllButton.getAttribute('aria-pressed')).toBe('false');
      expect(collapseAllButton.getAttribute('aria-disabled')).toBe('false');
      expect(collapseAllButton.classList).not.toContain('inactive');
    });
  });

  describe('getInstances()', () => {
    beforeEach(() => {
      // CollapseControls depend on Collapse instances
      document.querySelectorAll(CollapseSelector.DATA_MOUNT).forEach(collapse => new Collapse({ el: collapse }));
    });

    it('should return an empty array with no instances', () => {
      expect(CollapseControls.getInstances()).toEqual([]);
    });

    it('should return the proper number of instances', () => {
      // for simulation – do not target the same element IRL
      new CollapseControls({ el: controls });
      new CollapseControls({ el: controls });
      new CollapseControls({ el: controls });

      expect(CollapseControls.getInstances()).toHaveLength(3);
    });
  });

  describe('remove()', () => {
    beforeEach(() => {
      // CollapseControls depend on Collapse instances
      document.querySelectorAll(CollapseSelector.DATA_MOUNT).forEach(collapse => new Collapse({ el: collapse }));
    });

    it('should remove one CollapseControls when called on instance', () => {
      // for simulation – do not target the same element IRL
      new CollapseControls({ el: controls });
      new CollapseControls({ el: controls });
      new CollapseControls({ el: controls });

      const instance2 = CollapseControls.getInstances()[1];
      instance2.remove();

      expect(CollapseControls.getInstances()).toHaveLength(2);
      // ensure the proper instance was deleted
      expect(CollapseControls.getInstances()).not.toContain(instance2);
    });
  });
});
