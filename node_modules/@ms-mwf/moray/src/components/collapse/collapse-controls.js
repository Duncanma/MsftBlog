import Util from '../../js/util';
import Collapse, { EventName as CollapseEvent, Selector as CollapseSelector } from './collapse';

const instances = [];

export const Selector = {
  DATA_MOUNT: '[data-mount="collapse-controls"]',
  DATA_ACTION_COLLAPSE: '[data-action="collapse"]',
  DATA_ACTION_EXPAND: '[data-action="expand"]'
};

function _getTarget(el) {
  const selector = Util.getSelectorFromElement(el);
  return [].slice.call(document.querySelectorAll(selector));
}

function _syncDisabledStyle() {
  let openCount = 0;
  this.collapseList.forEach(collapse => {
    if (!collapse.isCollapsed) {
      openCount++;
    }
  });

  if (openCount === this.collapseListCount) {
    _enableButton(this.collapse);
    _disableButton(this.expand);
  } else if (openCount === 0) {
    _enableButton(this.expand);
    _disableButton(this.collapse);
  } else {
    _enableButton(this.expand);
    _enableButton(this.collapse);
  }
}

function _disableButton(elem) {
  elem.setAttribute('aria-pressed', true);
  elem.setAttribute('aria-disabled', true);
  elem.classList.add('inactive');
}

function _enableButton(elem) {
  elem.setAttribute('aria-pressed', false);
  elem.setAttribute('aria-disabled', false);
  elem.classList.remove('inactive');
}

class CollapseControls {
  /**
   * Create the CollapseControls
   * @param {Object} opts - The CollapseControls options
   * @param {Node} opts.el - The CollapseControls DOM node.
   */
  constructor(opts) {
    this.el = opts.el;
    this.accordion = _getTarget(this.el)[0];
    this.collapse = this.el.querySelector(Selector.DATA_ACTION_COLLAPSE);
    this.expand = this.el.querySelector(Selector.DATA_ACTION_EXPAND);
    this.collapseBtnList = this.accordion.querySelectorAll(CollapseSelector.DATA_MOUNT);
    this.collapseList = [];
    // Get the collapse instances and find the corresponding elements
    const collapseInstances = Collapse.getInstances();
    this.collapseBtnList.forEach(el => {
      this.collapseList.push(collapseInstances.find(collapse => collapse.triggerElement === el));
    });
    this.collapseListCount = this.collapseBtnList.length;
    this.openCount = 0;

    this.events = [
      {
        el: this.collapse,
        type: 'click',
        handler: this.collapseAll.bind(this)
      },
      {
        el: this.expand,
        type: 'click',
        handler: this.expandAll.bind(this)
      }
    ];
    this.collapseList.forEach(collapse => {
      // Add shown/hidden handlers to each Collapse
      this.events.push(
        {
          el: collapse.el,
          type: CollapseEvent.SHOWN,
          handler: _syncDisabledStyle.bind(this)
        },
        {
          el: collapse.el,
          type: CollapseEvent.HIDDEN,
          handler: _syncDisabledStyle.bind(this)
        }
      );
    });

    Util.addEvents(this.events);
    _syncDisabledStyle.call(this);

    instances.push(this);
  }

  /**
   * Collapse all the elements
   */
  collapseAll() {
    this.collapseList.forEach(element => {
      element.hide();
    });
    this.openCount = 0;
    _syncDisabledStyle.call(this);
  }

  /**
   * Update instance (added for API consistency)
   */
  update() {
    // Create and dispatch custom event
    this[CollapseEvent.ON_UPDATE] = new CustomEvent(CollapseEvent.ON_UPDATE, { bubbles: true });
    this.el.dispatchEvent(this[CollapseEvent.ON_UPDATE]);
  }

  /**
   * Expand all the elements
   */
  expandAll() {
    this.collapseList.forEach(element => {
      element.show();
      this.openCount = this.collapseListCount;
    });
    _syncDisabledStyle.call(this);
  }

  /**
   * Remove the event listeners and the instance
   */
  remove() {
    Util.removeEvents(this.events);

    // Remove this collapse reference from array of instances
    const index = instances.indexOf(this);
    instances.splice(index, 1);

    // Create and dispatch custom event
    this[CollapseEvent.ON_REMOVE] = new CustomEvent(CollapseEvent.ON_REMOVE, { bubbles: true });
    this.el.dispatchEvent(this[CollapseEvent.ON_REMOVE]);
  }

  /**
   * Get instances.
   * @returns {CollapseControls[]} An array of instances
   */
  static getInstances() {
    return instances;
  }
}

export default CollapseControls;
