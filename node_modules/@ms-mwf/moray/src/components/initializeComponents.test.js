import initializeComponents, { componentTuples } from './initializeComponents';

// mock all component constructors
jest.mock('./alert/alert');
jest.mock('./back-to-top/back-to-top');
jest.mock('./carousel/carousel');
jest.mock('./forms/character-count/character-count');
jest.mock('./click-group/click-group');
jest.mock('./collapse/collapse');
jest.mock('./collapse/collapse-controls');
jest.mock('./color-picker/color-picker');
jest.mock('./content-swap/content-swap');
jest.mock('./dropdown/dropdown');
jest.mock('./forms/interactive-star-rating/interactive-star-rating');
jest.mock('./forms/range/range');
jest.mock('./forms/validation/validation');
jest.mock('./modal/modal');
jest.mock('./multi-feature/multi-feature');
jest.mock('./popover/popover');
jest.mock('./positioner/positioner');
jest.mock('./show-more-show-less/show-more-show-less');
jest.mock('./sticky/sticky');
jest.mock('./tab/tab');
jest.mock('./tab/tab-slider');
jest.mock('./tooltip/tooltip');

const html = `
  <div data-mount="alert-dismissible"></div>
  <div data-mount="back-to-top"></div>
  <div data-mount="carousel"></div>
  <div data-mount="character-count"></div>
  <div data-mount="click-group"></div>
  <div data-mount="collapse"></div>
  <div data-mount="collapse-controls"></div>
  <div data-mount="color-picker"></div>
  <div data-mount="content-swap"></div>
  <div data-mount="dropdown"></div>
  <div data-mount="form-star"></div>
  <div data-mount="validation"></div>
  <div data-mount="modal"></div>
  <div data-mount="multi-feature"></div>
  <div data-mount="popover"></div>
  <div data-position="positioner"></div>
  <div data-mount="range"></div>
  <div data-mount="show-more-show-less"></div>
  <div data-mount="sticky"></div>
  <div data-mount="tab"></div>
  <div data-mount="tab-slider"></div>
  <div data-mount="tooltip"></div>
`;

document.body.innerHTML = html;

describe('initializeComponents()', () => {
  it('should initialize each MWF component with the proper element', () => {
    initializeComponents();

    componentTuples.forEach(([constructor, selector]) => {
      expect(constructor).toBeCalledWith({ el: document.querySelector(selector.DATA_MOUNT) });
    });
  });
});
