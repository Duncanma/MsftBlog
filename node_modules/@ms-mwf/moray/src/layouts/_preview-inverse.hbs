<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
  <meta http-equiv="x-ua-compatible" content="ie=edge">
  {{#if _target.meta.theme}}
    {{setVar 'theme-path' (strConcat '/css/themes/' _target.meta.theme.name)}}
    {{#if _target.meta.theme.dark}}
      <link media="all" rel="stylesheet" href="{{ path (strConcat theme-path '-dark.css') }}">
    {{else}}
      <link media="all" rel="stylesheet" href="{{ path (strConcat theme-path '.css') }}">
    {{/if}}
  {{else}}
    <link media="all" rel="stylesheet" href="{{ path '/css/main.css' }}">
  {{/if}}
  {{#if _target.meta.uhf}}{{> '@uhf-stylesheets'}}{{/if}}
  <title>{{ _target.title }}</title>
  <script src="{{ path '/js/polyfills.js' }}"></script>
</head>
<body>
  {{!-- back-to-top destination - keep above all page navigation --}}
  <div id="page-top"></div>
  {{#if _target.meta.uhf}}{{> '@uhf-header'}}{{/if}}
  <section id="inverseContainer" class="material-color-brand-dark">
    <div class="py-4 container">
      <div class="row">
        <div class="col-12">
          <h2>Theme Controls</h2>
          <p>Theme controls allow the component to be viewed in the inverse of the page theme.</p>
          <p>Theme: <span id="themeName" class="font-weight-bold">light</span> <span class="ml-4">Component class:</span> <span id="className" class="font-weight-bold ">theme-dark</span></p>
          <button id="theme-toggle-button" class="btn btn-primary btn-sm mt-2">Inverse the page</button>
        </div>
      </div>
    </div>
  </section>
  <main class="py-4 theme-dark" {{{htmlAttr _target.context.meta.main.attributes}}}>
    {{!-- `meta` is a custom object that can be supplied in component configs --}}
    <div class="{{#unless _target.meta.wrapper.no-margin}}my-4{{/unless}} {{_target.meta.wrapper.classes}}">
      {{{ yield }}}
    </div>
  </main>
  {{#if _target.meta.uhf}}{{> '@uhf-footer'}}{{/if}}
  <script src="{{ path '/js/bundle.js' }}"></script>
  <script>
    const THEME = {
      dark: {
        name: 'dark',
        path: "/css/themes/main-dark.css",
        css_class: 'theme-dark',
        inverse: 'light'
      },
      light: {
        name: "light",
        path: '/css/main.css',
        css_class: 'theme-light',
        inverse: 'dark'
      }
    }

    let activeTheme = THEME.light;
    const btn = document.querySelector('#theme-toggle-button');

    function toggleInverseTheme() {
      const link = document.getElementsByTagName('link')[0];
      const container = document.querySelector('main');
      const themeName = document.querySelector('#themeName');
      const className = document.querySelector('#className');
      const newTheme = THEME[activeTheme.inverse]

      // 1. swap classes on wrapper element
      container.classList.remove(newTheme.css_class);
      container.classList.add(activeTheme.css_class);

      // 2. swap page CSS
      link.href = newTheme.path;

      // 3. render theme "name" and CSS file name
      themeName.textContent = newTheme.name;
      className.textContent = activeTheme.css_class;

      // 4. swap active theme state
      activeTheme = newTheme;
    }

    btn.addEventListener('click', () => {
      toggleInverseTheme();
    });

  </script>
</body>
</html>
