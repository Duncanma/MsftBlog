// stylelint-disable property-blacklist, declaration-no-important

//
// Border
//

.border {
  border-width: $border-width !important;
  border-style: solid;
  border-color: $border-color;

  @include theme-inverse {
    border-color: $border-color-inverse;
  }
}

.border-top {
  border-top-width: $border-width !important;
  border-top-style: solid;
  border-top-color: $border-color;

  @include theme-inverse {
    border-top-color: $border-color-inverse;
  }
}

.border-right {
  @include ltr {
    border-right-width: $border-width !important;
    border-right-style: solid;
    border-right-color: $border-color;
  }

  @include rtl {
    border-left-width: $border-width !important;
    border-left-style: solid;
    border-left-color: $border-color;
  }

  @include theme-inverse {
    @include ltr {
      border-right-color: $border-color-inverse;
    }
    @include rtl {
      border-left-color: $border-color-inverse;
    }
  }
}

.border-bottom {
  border-bottom-width: $border-width !important;
  border-bottom-style: solid;
  border-bottom-color: $border-color;

  @include theme-inverse {
    border-bottom-color: $border-color-inverse;
  }
}

.border-left {
  @include ltr {
    border-left-width: $border-width !important;
    border-left-style: solid;
    border-left-color: $border-color;

    @include theme-inverse {
      border-left-color: $border-color-inverse;
    }
  }

  @include rtl {
    border-right-width: $border-width !important;
    border-right-style: solid;
    border-right-color: $border-color;

    @include theme-inverse {
      border-right-color: $border-color-inverse;
    }
  }
}

.border-width {
  // Note: ltr and rtl styles needed to match specificity of `.border-{dir}` (see above)
  @include ltr {
    &-2 {
      border-width: 2 * $border-width !important;
    }
    &-3 {
      border-width: 3 * $border-width !important;
    }
    &-4 {
      border-width: 4 * $border-width !important;
    }
  }
  @include rtl {
    &-2 {
      border-width: 2 * $border-width !important;
    }
    &-3 {
      border-width: 3 * $border-width !important;
    }
    &-4 {
      border-width: 4 * $border-width !important;
    }
  }
}

.border-0        { border: 0 !important; }
.border-top-0    { border-top: 0 !important; }
.border-right-0 {
  @include ltr {
    border-right: 0 !important;
  }
  @include rtl {
    border-left: 0 !important;
  }
}
.border-bottom-0 { border-bottom: 0 !important; }
.border-left-0 {
  @include ltr {
    border-left: 0 !important;
  }
  @include rtl {
    border-right: 0 !important;
  }
}

// Color

// Create placeholders to be referenced
@each $shade, $hex in $grays {
  %border-gray-#{$shade} {
    border-color: $hex !important;
  }
}

@each $name, $hex in $mwf-colors {
  %border-#{$name} {
    border-color: $hex !important;
  }
}

@each $shade, $hex in $grays {
  .border-gray-#{$shade} {
    @extend %border-gray-#{$shade};
  }
}

@each $name, $hex in $mwf-colors {
  .border-#{$name} {
    @extend %border-#{$name};
  }
}

// Define classes to use placeholders
@each $name, $hex in $mwf-theme-neutrals {
  $gray-shade: get-key-by-value($grays, $hex);

  .border-neutral-#{$name} {
    @include extend-color-variant($hex, "border");

    @include theme-inverse {
      @include extend-color-variant(mwf-theme-color($theme-inverse, $name), "border");
    }
  }
}

@each $name, $hex in $mwf-theme-colors {
  $color-name: get-key-by-value($mwf-colors, $hex);
  $gray-shade: get-key-by-value($grays, $hex);

  .border-#{$name} {
    @include extend-color-variant($hex, "border");

    @include theme-inverse {
      @include extend-color-variant(mwf-theme-color($theme-inverse, $name), "border");
    }
  }
}

.border-transparent {
  border-color: transparent !important;
}

.border-current-color {
  border-color: currentColor !important;
}

//
// Border-radius
//

.rounded-sm {
  border-radius: $border-radius-sm !important;
}

.rounded {
  border-radius: $border-radius !important;
}

.rounded-top {
  border-top-left-radius: $border-radius !important;
  border-top-right-radius: $border-radius !important;
}

.rounded-right {
  @include ltr {
    border-top-right-radius: $border-radius !important;
    border-bottom-right-radius: $border-radius !important;
  }
  @include rtl {
    border-top-left-radius: $border-radius !important;
    border-bottom-left-radius: $border-radius !important;
  }
}

.rounded-bottom {
  border-bottom-right-radius: $border-radius !important;
  border-bottom-left-radius: $border-radius !important;
}

.rounded-left {
  @include ltr {
    border-top-left-radius: $border-radius !important;
    border-bottom-left-radius: $border-radius !important;
  }
  @include rtl {
    border-top-right-radius: $border-radius !important;
    border-bottom-right-radius: $border-radius !important;
  }
}

.rounded-lg {
  border-radius: $border-radius-lg !important;
}

.rounded-xl {
  border-radius: $border-radius-xl !important;
}

.rounded-circle {
  border-radius: 50% !important;
}

.rounded-pill {
  border-radius: $rounded-pill !important;
}

.rounded-0 {
  border-radius: 0 !important;
}
