// Get luminance value of a color from 0 to 255
@function yiq($color) {
  $r: red($color);
  $g: green($color);
  $b: blue($color);

  @return (($r * 299) + ($g * 587) + ($b * 114)) / 1000;
}

// For the sRGB colorspace, the relative luminance of a color is defined as
//    L = 0.2126 * R + 0.7152 * G+ 0.0722 * B
// where R, G and B are defined as:
//    if RsRGB <= 0.03928 then R = RsRGB/12.92 else R = ((RsRGB+0.055)/1.055) ^ 2.4
//    if GsRGB <= 0.03928 then G = GsRGB/12.92 else G = ((GsRGB+0.055)/1.055) ^ 2.4
//    if BsRGB <= 0.03928 then B = BsRGB/12.92 else B = ((BsRGB+0.055)/1.055) ^ 2.4
// and RsRGB, GsRGB, and BsRGB are defined as:
//    RsRGB = R8bit/255
//    GsRGB = G8bit/255
//    BsRGB = B8bit/255
// The "^" character is the exponentiation operator.
// (Formula taken from [sRGB] and [IEC-4WD]).
//
// Note that due to SCSS limitations, we are doing an algebraic approximation
// of the decimal exponent (2.4). This yields slightly imprecise luminance values.
@function wcag-relative-luminance($color) {
  $rs-rgb: red($color) / 255;
  $gs-rgb: green($color) / 255;
  $bs-rgb: blue($color) / 255;

  $R: $rs-rgb / 12.92;
  $G: $gs-rgb / 12.92;
  $B: $bs-rgb / 12.92;

  @if $rs-rgb > 0.03928 {
    $R: pow(($rs-rgb + 0.055) / 1.055, 2.4);
  }
  @if $gs-rgb > 0.03928 {
    $G: pow(($gs-rgb + 0.055) / 1.055, 2.4);
  }
  @if $bs-rgb > 0.03928 {
    $B: pow(($bs-rgb + 0.055) / 1.055, 2.4);
  }

  @return (0.2126 * $R + 0.7152 * $G + 0.0722 * $B);
}

// Return the WCAG contrast ratio of two colors
// https://www.w3.org/TR/2008/REC-WCAG20-20081211/#contrast-ratiodef
// The contrast ratio assumes color1 is the LIGHTER of the colors.
// Note that the return of wcag-relative-luminance is a little fuzzy due to SCSS
// limitations, so don't trust too many significant figures.
@function wcag-contrast-ratio($color1, $color2) {
  $yiq-color1: yiq($color1);
  $yiq-color2: yiq($color2);

  @if $yiq-color1 > $yiq-color2 {
    @return (wcag-relative-luminance($color1) + 0.05) / (wcag-relative-luminance($color2) + 0.05);
  } @else {
    @return (wcag-relative-luminance($color2) + 0.05) / (wcag-relative-luminance($color1) + 0.05);
  }
}

// Returns black or white counterpart that contrasts with color provided
@function color-yiq($color, $dark: $yiq-text-dark, $light: $yiq-text-light) {
  $yiq: yiq($color);

  @if ($yiq >= $yiq-contrasted-threshold) {
    @return $dark;
  } @else {
    @return $light;
  }
}

// link color contrast
@function link-color-yiq($color, $link: $link-color) {
  $contrast-ratio: wcag-contrast-ratio($color, $link);

  @if ($contrast-ratio >= 4.49) {
    @return $link;
  } @else {
    @return color-yiq($color);
  }
}

// returns true if hex is completely colorless, ie. black, white, or gray
@function is-gray($color) {
  @return (red($color) == blue($color) and blue($color) == green($color));
}

@function hover-color($color) {
  @return mix(black, $color, percentage($hover-shade));
}

@function active-color($color) {
  @return mix(black, $color, percentage($active-shade));
}

// Overrides to Bootstrap functions for backwards compatibility

// Retrieve custom color Sass maps
@function color($key: "blue") {
  @return map-get($mwf-colors, $key);
}

@function theme-color($key: "primary") {
  @return map-get($mwf-theme-colors, $key);
}

@function gray($key: "100") {
  @return map-get($grays, $key);
}

// Request a theme color level
@function theme-color-level($color-name: "primary", $level: 0) {
  $color: theme-color($color-name);
  $color-base: if($level > 0, $black, $white);
  $level: abs($level);

  @return mix($color-base, $color, $level * $theme-color-interval);
}

// Extensions to Bootstrap functions

@function theme-color-opposite($name) {
  @if str-index($name, "-light") {
    @return theme-color(str-replace($name, "-light", "-dark"));
  } @else if str-index($name, "-dark") {
    @return theme-color(str-replace($name, "-dark", "-light"));
  } @else {
    @return null;
  }
}
